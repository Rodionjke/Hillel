/*! For license information please see index.js.LICENSE.txt */
(()=>{var e={711:(e,t,n)=>{"use strict";n.d(t,{n4:()=>w,UD:()=>y});var i=n(354),s=n(222),r=n(979),o=n(581);var a=n(604),l=n(793),c=n(760),u=n(134),h=n(906);function d(e,t,n){void 0===n&&(n=!1);var d,f,p=(0,o.sb)(t),g=(0,o.sb)(t)&&function(e){var t=e.getBoundingClientRect(),n=(0,h.LI)(t.width)/e.offsetWidth||1,i=(0,h.LI)(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),m=(0,c.A)(t),_=(0,i.A)(e,g,n),v={scrollLeft:0,scrollTop:0},b={x:0,y:0};return(p||!p&&!n)&&(("body"!==(0,a.A)(t)||(0,u.A)(m))&&(v=(d=t)!==(0,r.A)(d)&&(0,o.sb)(d)?{scrollLeft:(f=d).scrollLeft,scrollTop:f.scrollTop}:(0,s.A)(d)),(0,o.sb)(t)?((b=(0,i.A)(t,!0)).x+=t.clientLeft,b.y+=t.clientTop):m&&(b.x=(0,l.A)(m))),{x:_.left+v.scrollLeft-b.x,y:_.top+v.scrollTop-b.y,width:_.width,height:_.height}}var f=n(360),p=n(867),g=n(579),m=n(278);function _(e){var t=new Map,n=new Set,i=[];function s(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&s(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||s(e)})),i}var v={placement:"bottom",modifiers:[],strategy:"absolute"};function b(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function y(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,s=t.defaultOptions,r=void 0===s?v:s;return function(e,t,n){void 0===n&&(n=r);var s,a,l={placement:"bottom",orderedModifiers:[],options:Object.assign({},v,r),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],u=!1,h={state:l,setOptions:function(n){var s="function"==typeof n?n(l.options):n;y(),l.options=Object.assign({},r,l.options,s),l.scrollParents={reference:(0,o.vq)(e)?(0,p.A)(e):e.contextElement?(0,p.A)(e.contextElement):[],popper:(0,p.A)(t)};var a,u,d=function(e){var t=_(e);return m.GM.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(i,l.options.modifiers),u=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return l.orderedModifiers=d.filter((function(e){return e.enabled})),l.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,s=e.effect;if("function"==typeof s){var r=s({state:l,name:t,instance:h,options:i}),o=function(){};c.push(r||o)}})),h.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,n=e.popper;if(b(t,n)){l.rects={reference:d(t,(0,g.A)(n),"fixed"===l.options.strategy),popper:(0,f.A)(n)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(e){return l.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<l.orderedModifiers.length;i++)if(!0!==l.reset){var s=l.orderedModifiers[i],r=s.fn,o=s.options,a=void 0===o?{}:o,c=s.name;"function"==typeof r&&(l=r({state:l,options:a,name:c,instance:h})||l)}else l.reset=!1,i=-1}}},update:(s=function(){return new Promise((function(e){h.forceUpdate(),e(l)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(s())}))}))),a}),destroy:function(){y(),u=!0}};if(!b(e,t))return h;function y(){c.forEach((function(e){return e()})),c=[]}return h.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),h}}var w=y()},446:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(581);function s(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&(0,i.Ng)(n)){var s=t;do{if(s&&e.isSameNode(s))return!0;s=s.parentNode||s.host}while(s)}return!1}},354:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(581),s=n(906),r=n(979),o=n(283);function a(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var a=e.getBoundingClientRect(),l=1,c=1;t&&(0,i.sb)(e)&&(l=e.offsetWidth>0&&(0,s.LI)(a.width)/e.offsetWidth||1,c=e.offsetHeight>0&&(0,s.LI)(a.height)/e.offsetHeight||1);var u=((0,i.vq)(e)?(0,r.A)(e):window).visualViewport,h=!(0,o.A)()&&n,d=(a.left+(h&&u?u.offsetLeft:0))/l,f=(a.top+(h&&u?u.offsetTop:0))/c,p=a.width/l,g=a.height/c;return{width:p,height:g,top:f,right:d+p,bottom:f+g,left:d,x:d,y:f}}},271:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(979);function s(e){return(0,i.A)(e).getComputedStyle(e)}},760:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(581);function s(e){return(((0,i.vq)(e)?e.ownerDocument:e.document)||window.document).documentElement}},360:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(354);function s(e){var t=(0,i.A)(e),n=e.offsetWidth,s=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-s)<=1&&(s=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:s}}},604:(e,t,n)=>{"use strict";function i(e){return e?(e.nodeName||"").toLowerCase():null}n.d(t,{A:()=>i})},579:(e,t,n)=>{"use strict";n.d(t,{A:()=>h});var i=n(979),s=n(604),r=n(271),o=n(581);function a(e){return["table","td","th"].indexOf((0,s.A)(e))>=0}var l=n(83),c=n(398);function u(e){return(0,o.sb)(e)&&"fixed"!==(0,r.A)(e).position?e.offsetParent:null}function h(e){for(var t=(0,i.A)(e),n=u(e);n&&a(n)&&"static"===(0,r.A)(n).position;)n=u(n);return n&&("html"===(0,s.A)(n)||"body"===(0,s.A)(n)&&"static"===(0,r.A)(n).position)?t:n||function(e){var t=/firefox/i.test((0,c.A)());if(/Trident/i.test((0,c.A)())&&(0,o.sb)(e)&&"fixed"===(0,r.A)(e).position)return null;var n=(0,l.A)(e);for((0,o.Ng)(n)&&(n=n.host);(0,o.sb)(n)&&["html","body"].indexOf((0,s.A)(n))<0;){var i=(0,r.A)(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}},83:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var i=n(604),s=n(760),r=n(581);function o(e){return"html"===(0,i.A)(e)?e:e.assignedSlot||e.parentNode||((0,r.Ng)(e)?e.host:null)||(0,s.A)(e)}},979:(e,t,n)=>{"use strict";function i(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}n.d(t,{A:()=>i})},222:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(979);function s(e){var t=(0,i.A)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},793:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var i=n(354),s=n(760),r=n(222);function o(e){return(0,i.A)((0,s.A)(e)).left+(0,r.A)(e).scrollLeft}},581:(e,t,n)=>{"use strict";n.d(t,{Ng:()=>o,sb:()=>r,vq:()=>s});var i=n(979);function s(e){return e instanceof(0,i.A)(e).Element||e instanceof Element}function r(e){return e instanceof(0,i.A)(e).HTMLElement||e instanceof HTMLElement}function o(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,i.A)(e).ShadowRoot||e instanceof ShadowRoot)}},283:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(398);function s(){return!/^((?!chrome|android).)*safari/i.test((0,i.A)())}},134:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(271);function s(e){var t=(0,i.A)(e),n=t.overflow,s=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+s)}},867:(e,t,n)=>{"use strict";n.d(t,{A:()=>c});var i=n(83),s=n(134),r=n(604),o=n(581);function a(e){return["html","body","#document"].indexOf((0,r.A)(e))>=0?e.ownerDocument.body:(0,o.sb)(e)&&(0,s.A)(e)?e:a((0,i.A)(e))}var l=n(979);function c(e,t){var n;void 0===t&&(t=[]);var r=a(e),o=r===(null==(n=e.ownerDocument)?void 0:n.body),u=(0,l.A)(r),h=o?[u].concat(u.visualViewport||[],(0,s.A)(r)?r:[]):r,d=t.concat(h);return o?d:d.concat(c((0,i.A)(h)))}},278:(e,t,n)=>{"use strict";n.d(t,{DD:()=>m,EP:()=>A,GM:()=>C,LF:()=>v,LG:()=>y,M9:()=>T,Mn:()=>i,OM:()=>l,Ol:()=>g,R9:()=>d,SE:()=>E,WY:()=>h,_N:()=>u,ci:()=>_,iW:()=>w,ir:()=>p,kb:()=>o,ni:()=>c,pA:()=>x,pG:()=>r,qZ:()=>a,sQ:()=>s,v5:()=>b,xf:()=>f});var i="top",s="bottom",r="right",o="left",a="auto",l=[i,s,r,o],c="start",u="end",h="clippingParents",d="viewport",f="popper",p="reference",g=l.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+u])}),[]),m=[].concat(l,[a]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+u])}),[]),_="beforeRead",v="read",b="afterRead",y="beforeMain",w="main",A="afterMain",x="beforeWrite",T="write",E="afterWrite",C=[_,v,b,y,w,A,x,T,E]},11:(e,t,n)=>{"use strict";n.r(t),n.d(t,{afterMain:()=>i.EP,afterRead:()=>i.v5,afterWrite:()=>i.SE,applyStyles:()=>s.A,arrow:()=>r.A,auto:()=>i.qZ,basePlacements:()=>i.OM,beforeMain:()=>i.LG,beforeRead:()=>i.ci,beforeWrite:()=>i.pA,bottom:()=>i.sQ,clippingParents:()=>i.WY,computeStyles:()=>o.A,createPopper:()=>g.n4,createPopperBase:()=>f.n4,createPopperLite:()=>_,detectOverflow:()=>p.A,end:()=>i._N,eventListeners:()=>a.A,flip:()=>l.A,hide:()=>c.A,left:()=>i.kb,main:()=>i.iW,modifierPhases:()=>i.GM,offset:()=>u.A,placements:()=>i.DD,popper:()=>i.xf,popperGenerator:()=>f.UD,popperOffsets:()=>h.A,preventOverflow:()=>d.A,read:()=>i.LF,reference:()=>i.ir,right:()=>i.pG,start:()=>i.ni,top:()=>i.Mn,variationPlacements:()=>i.Ol,viewport:()=>i.R9,write:()=>i.M9});var i=n(278),s=n(607),r=n(256),o=n(262),a=n(68),l=n(644),c=n(81),u=n(490),h=n(59),d=n(192),f=n(711),p=n(397),g=n(576),m=[a.A,h.A,o.A,s.A],_=(0,f.UD)({defaultModifiers:m})},607:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});var i=n(604),s=n(581);const r={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];(0,s.sb)(o)&&(0,i.A)(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});(0,s.sb)(r)&&(0,i.A)(r)&&(Object.assign(r.style,a),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]}},256:(e,t,n)=>{"use strict";n.d(t,{A:()=>d});var i=n(632),s=n(360),r=n(446),o=n(579),a=n(703),l=n(523),c=n(318),u=n(7),h=n(278);const d={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,d=e.options,f=n.elements.arrow,p=n.modifiersData.popperOffsets,g=(0,i.A)(n.placement),m=(0,a.A)(g),_=[h.kb,h.pG].indexOf(g)>=0?"height":"width";if(f&&p){var v=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,c.A)("number"!=typeof e?e:(0,u.A)(e,h.OM))}(d.padding,n),b=(0,s.A)(f),y="y"===m?h.Mn:h.kb,w="y"===m?h.sQ:h.pG,A=n.rects.reference[_]+n.rects.reference[m]-p[m]-n.rects.popper[_],x=p[m]-n.rects.reference[m],T=(0,o.A)(f),E=T?"y"===m?T.clientHeight||0:T.clientWidth||0:0,C=A/2-x/2,k=v[y],S=E-b[_]-v[w],O=E/2-b[_]/2+C,D=(0,l.u)(k,O,S),L=m;n.modifiersData[r]=((t={})[L]=D,t.centerOffset=D-O,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&(0,r.A)(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},262:(e,t,n)=>{"use strict";n.d(t,{A:()=>f});var i=n(278),s=n(579),r=n(979),o=n(760),a=n(271),l=n(632),c=n(101),u=n(906),h={top:"auto",right:"auto",bottom:"auto",left:"auto"};function d(e){var t,n=e.popper,l=e.popperRect,c=e.placement,d=e.variation,f=e.offsets,p=e.position,g=e.gpuAcceleration,m=e.adaptive,_=e.roundOffsets,v=e.isFixed,b=f.x,y=void 0===b?0:b,w=f.y,A=void 0===w?0:w,x="function"==typeof _?_({x:y,y:A}):{x:y,y:A};y=x.x,A=x.y;var T=f.hasOwnProperty("x"),E=f.hasOwnProperty("y"),C=i.kb,k=i.Mn,S=window;if(m){var O=(0,s.A)(n),D="clientHeight",L="clientWidth";if(O===(0,r.A)(n)&&(O=(0,o.A)(n),"static"!==(0,a.A)(O).position&&"absolute"===p&&(D="scrollHeight",L="scrollWidth")),c===i.Mn||(c===i.kb||c===i.pG)&&d===i._N)k=i.sQ,A-=(v&&O===S&&S.visualViewport?S.visualViewport.height:O[D])-l.height,A*=g?1:-1;if(c===i.kb||(c===i.Mn||c===i.sQ)&&d===i._N)C=i.pG,y-=(v&&O===S&&S.visualViewport?S.visualViewport.width:O[L])-l.width,y*=g?1:-1}var N,j=Object.assign({position:p},m&&h),$=!0===_?function(e,t){var n=e.x,i=e.y,s=t.devicePixelRatio||1;return{x:(0,u.LI)(n*s)/s||0,y:(0,u.LI)(i*s)/s||0}}({x:y,y:A},(0,r.A)(n)):{x:y,y:A};return y=$.x,A=$.y,g?Object.assign({},j,((N={})[k]=E?"0":"",N[C]=T?"0":"",N.transform=(S.devicePixelRatio||1)<=1?"translate("+y+"px, "+A+"px)":"translate3d("+y+"px, "+A+"px, 0)",N)):Object.assign({},j,((t={})[k]=E?A+"px":"",t[C]=T?y+"px":"",t.transform="",t))}const f={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,s=void 0===i||i,r=n.adaptive,o=void 0===r||r,a=n.roundOffsets,u=void 0===a||a,h={placement:(0,l.A)(t.placement),variation:(0,c.A)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:s,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,d(Object.assign({},h,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:o,roundOffsets:u})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,d(Object.assign({},h,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},68:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});var i=n(979),s={passive:!0};const r={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,a=void 0===o||o,l=r.resize,c=void 0===l||l,u=(0,i.A)(t.elements.popper),h=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&h.forEach((function(e){e.addEventListener("scroll",n.update,s)})),c&&u.addEventListener("resize",n.update,s),function(){a&&h.forEach((function(e){e.removeEventListener("scroll",n.update,s)})),c&&u.removeEventListener("resize",n.update,s)}},data:{}}},644:(e,t,n)=>{"use strict";n.d(t,{A:()=>h});var i={left:"right",right:"left",bottom:"top",top:"bottom"};function s(e){return e.replace(/left|right|bottom|top/g,(function(e){return i[e]}))}var r=n(632),o={start:"end",end:"start"};function a(e){return e.replace(/start|end/g,(function(e){return o[e]}))}var l=n(397),c=n(101),u=n(278);const h={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var o=n.mainAxis,h=void 0===o||o,d=n.altAxis,f=void 0===d||d,p=n.fallbackPlacements,g=n.padding,m=n.boundary,_=n.rootBoundary,v=n.altBoundary,b=n.flipVariations,y=void 0===b||b,w=n.allowedAutoPlacements,A=t.options.placement,x=(0,r.A)(A),T=p||(x===A||!y?[s(A)]:function(e){if((0,r.A)(e)===u.qZ)return[];var t=s(e);return[a(e),t,a(t)]}(A)),E=[A].concat(T).reduce((function(e,n){return e.concat((0,r.A)(n)===u.qZ?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,s=n.boundary,o=n.rootBoundary,a=n.padding,h=n.flipVariations,d=n.allowedAutoPlacements,f=void 0===d?u.DD:d,p=(0,c.A)(i),g=p?h?u.Ol:u.Ol.filter((function(e){return(0,c.A)(e)===p})):u.OM,m=g.filter((function(e){return f.indexOf(e)>=0}));0===m.length&&(m=g);var _=m.reduce((function(t,n){return t[n]=(0,l.A)(e,{placement:n,boundary:s,rootBoundary:o,padding:a})[(0,r.A)(n)],t}),{});return Object.keys(_).sort((function(e,t){return _[e]-_[t]}))}(t,{placement:n,boundary:m,rootBoundary:_,padding:g,flipVariations:y,allowedAutoPlacements:w}):n)}),[]),C=t.rects.reference,k=t.rects.popper,S=new Map,O=!0,D=E[0],L=0;L<E.length;L++){var N=E[L],j=(0,r.A)(N),$=(0,c.A)(N)===u.ni,I=[u.Mn,u.sQ].indexOf(j)>=0,P=I?"width":"height",M=(0,l.A)(t,{placement:N,boundary:m,rootBoundary:_,altBoundary:v,padding:g}),H=I?$?u.pG:u.kb:$?u.sQ:u.Mn;C[P]>k[P]&&(H=s(H));var q=s(H),F=[];if(h&&F.push(M[j]<=0),f&&F.push(M[H]<=0,M[q]<=0),F.every((function(e){return e}))){D=N,O=!1;break}S.set(N,F)}if(O)for(var R=function(e){var t=E.find((function(t){var n=S.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return D=t,"break"},W=y?3:1;W>0;W--){if("break"===R(W))break}t.placement!==D&&(t.modifiersData[i]._skip=!0,t.placement=D,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},81:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(278),s=n(397);function r(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function o(e){return[i.Mn,i.pG,i.sQ,i.kb].some((function(t){return e[t]>=0}))}const a={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,a=t.rects.popper,l=t.modifiersData.preventOverflow,c=(0,s.A)(t,{elementContext:"reference"}),u=(0,s.A)(t,{altBoundary:!0}),h=r(c,i),d=r(u,a,l),f=o(h),p=o(d);t.modifiersData[n]={referenceClippingOffsets:h,popperEscapeOffsets:d,isReferenceHidden:f,hasPopperEscaped:p},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":f,"data-popper-escaped":p})}}},490:(e,t,n)=>{"use strict";n.d(t,{A:()=>r});var i=n(632),s=n(278);const r={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,o=n.offset,a=void 0===o?[0,0]:o,l=s.DD.reduce((function(e,n){return e[n]=function(e,t,n){var r=(0,i.A)(e),o=[s.kb,s.Mn].indexOf(r)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,l=a[0],c=a[1];return l=l||0,c=(c||0)*o,[s.kb,s.pG].indexOf(r)>=0?{x:c,y:l}:{x:l,y:c}}(n,t.rects,a),e}),{}),c=l[t.placement],u=c.x,h=c.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=h),t.modifiersData[r]=l}}},59:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(815);const s={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=(0,i.A)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},192:(e,t,n)=>{"use strict";n.d(t,{A:()=>f});var i=n(278),s=n(632),r=n(703);var o=n(523),a=n(360),l=n(579),c=n(397),u=n(101),h=n(364),d=n(906);const f={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,f=e.name,p=n.mainAxis,g=void 0===p||p,m=n.altAxis,_=void 0!==m&&m,v=n.boundary,b=n.rootBoundary,y=n.altBoundary,w=n.padding,A=n.tether,x=void 0===A||A,T=n.tetherOffset,E=void 0===T?0:T,C=(0,c.A)(t,{boundary:v,rootBoundary:b,padding:w,altBoundary:y}),k=(0,s.A)(t.placement),S=(0,u.A)(t.placement),O=!S,D=(0,r.A)(k),L="x"===D?"y":"x",N=t.modifiersData.popperOffsets,j=t.rects.reference,$=t.rects.popper,I="function"==typeof E?E(Object.assign({},t.rects,{placement:t.placement})):E,P="number"==typeof I?{mainAxis:I,altAxis:I}:Object.assign({mainAxis:0,altAxis:0},I),M=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,H={x:0,y:0};if(N){if(g){var q,F="y"===D?i.Mn:i.kb,R="y"===D?i.sQ:i.pG,W="y"===D?"height":"width",B=N[D],z=B+C[F],V=B-C[R],X=x?-$[W]/2:0,Q=S===i.ni?j[W]:$[W],U=S===i.ni?-$[W]:-j[W],Y=t.elements.arrow,K=x&&Y?(0,a.A)(Y):{width:0,height:0},G=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,h.A)(),J=G[F],Z=G[R],ee=(0,o.u)(0,j[W],K[W]),te=O?j[W]/2-X-ee-J-P.mainAxis:Q-ee-J-P.mainAxis,ne=O?-j[W]/2+X+ee+Z+P.mainAxis:U+ee+Z+P.mainAxis,ie=t.elements.arrow&&(0,l.A)(t.elements.arrow),se=ie?"y"===D?ie.clientTop||0:ie.clientLeft||0:0,re=null!=(q=null==M?void 0:M[D])?q:0,oe=B+te-re-se,ae=B+ne-re,le=(0,o.u)(x?(0,d.jk)(z,oe):z,B,x?(0,d.T9)(V,ae):V);N[D]=le,H[D]=le-B}if(_){var ce,ue="x"===D?i.Mn:i.kb,he="x"===D?i.sQ:i.pG,de=N[L],fe="y"===L?"height":"width",pe=de+C[ue],ge=de-C[he],me=-1!==[i.Mn,i.kb].indexOf(k),_e=null!=(ce=null==M?void 0:M[L])?ce:0,ve=me?pe:de-j[fe]-$[fe]-_e+P.altAxis,be=me?de+j[fe]+$[fe]-_e-P.altAxis:ge,ye=x&&me?(0,o.P)(ve,de,be):(0,o.u)(x?ve:pe,de,x?be:ge);N[L]=ye,H[L]=ye-de}t.modifiersData[f]=H}},requiresIfExists:["offset"]}},576:(e,t,n)=>{"use strict";n.d(t,{n4:()=>p});var i=n(711),s=n(68),r=n(59),o=n(262),a=n(607),l=n(490),c=n(644),u=n(192),h=n(256),d=n(81),f=[s.A,r.A,o.A,a.A,l.A,c.A,u.A,h.A,d.A],p=(0,i.UD)({defaultModifiers:f})},815:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var i=n(632),s=n(101),r=n(703),o=n(278);function a(e){var t,n=e.reference,a=e.element,l=e.placement,c=l?(0,i.A)(l):null,u=l?(0,s.A)(l):null,h=n.x+n.width/2-a.width/2,d=n.y+n.height/2-a.height/2;switch(c){case o.Mn:t={x:h,y:n.y-a.height};break;case o.sQ:t={x:h,y:n.y+n.height};break;case o.pG:t={x:n.x+n.width,y:d};break;case o.kb:t={x:n.x-a.width,y:d};break;default:t={x:n.x,y:n.y}}var f=c?(0,r.A)(c):null;if(null!=f){var p="y"===f?"height":"width";switch(u){case o.ni:t[f]=t[f]-(n[p]/2-a[p]/2);break;case o._N:t[f]=t[f]+(n[p]/2-a[p]/2)}}return t}},397:(e,t,n)=>{"use strict";n.d(t,{A:()=>T});var i=n(278),s=n(979),r=n(760),o=n(793),a=n(283);var l=n(271),c=n(222),u=n(906);var h=n(867),d=n(579),f=n(581),p=n(354),g=n(83),m=n(446),_=n(604);function v(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function b(e,t,n){return t===i.R9?v(function(e,t){var n=(0,s.A)(e),i=(0,r.A)(e),l=n.visualViewport,c=i.clientWidth,u=i.clientHeight,h=0,d=0;if(l){c=l.width,u=l.height;var f=(0,a.A)();(f||!f&&"fixed"===t)&&(h=l.offsetLeft,d=l.offsetTop)}return{width:c,height:u,x:h+(0,o.A)(e),y:d}}(e,n)):(0,f.vq)(t)?function(e,t){var n=(0,p.A)(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):v(function(e){var t,n=(0,r.A)(e),i=(0,c.A)(e),s=null==(t=e.ownerDocument)?void 0:t.body,a=(0,u.T9)(n.scrollWidth,n.clientWidth,s?s.scrollWidth:0,s?s.clientWidth:0),h=(0,u.T9)(n.scrollHeight,n.clientHeight,s?s.scrollHeight:0,s?s.clientHeight:0),d=-i.scrollLeft+(0,o.A)(e),f=-i.scrollTop;return"rtl"===(0,l.A)(s||n).direction&&(d+=(0,u.T9)(n.clientWidth,s?s.clientWidth:0)-a),{width:a,height:h,x:d,y:f}}((0,r.A)(e)))}function y(e,t,n,i){var s="clippingParents"===t?function(e){var t=(0,h.A)((0,g.A)(e)),n=["absolute","fixed"].indexOf((0,l.A)(e).position)>=0&&(0,f.sb)(e)?(0,d.A)(e):e;return(0,f.vq)(n)?t.filter((function(e){return(0,f.vq)(e)&&(0,m.A)(e,n)&&"body"!==(0,_.A)(e)})):[]}(e):[].concat(t),r=[].concat(s,[n]),o=r[0],a=r.reduce((function(t,n){var s=b(e,n,i);return t.top=(0,u.T9)(s.top,t.top),t.right=(0,u.jk)(s.right,t.right),t.bottom=(0,u.jk)(s.bottom,t.bottom),t.left=(0,u.T9)(s.left,t.left),t}),b(e,o,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}var w=n(815),A=n(318),x=n(7);function T(e,t){void 0===t&&(t={});var n=t,s=n.placement,o=void 0===s?e.placement:s,a=n.strategy,l=void 0===a?e.strategy:a,c=n.boundary,u=void 0===c?i.WY:c,h=n.rootBoundary,d=void 0===h?i.R9:h,g=n.elementContext,m=void 0===g?i.xf:g,_=n.altBoundary,b=void 0!==_&&_,T=n.padding,E=void 0===T?0:T,C=(0,A.A)("number"!=typeof E?E:(0,x.A)(E,i.OM)),k=m===i.xf?i.ir:i.xf,S=e.rects.popper,O=e.elements[b?k:m],D=y((0,f.vq)(O)?O:O.contextElement||(0,r.A)(e.elements.popper),u,d,l),L=(0,p.A)(e.elements.reference),N=(0,w.A)({reference:L,element:S,strategy:"absolute",placement:o}),j=v(Object.assign({},S,N)),$=m===i.xf?j:L,I={top:D.top-$.top+C.top,bottom:$.bottom-D.bottom+C.bottom,left:D.left-$.left+C.left,right:$.right-D.right+C.right},P=e.modifiersData.offset;if(m===i.xf&&P){var M=P[o];Object.keys(I).forEach((function(e){var t=[i.pG,i.sQ].indexOf(e)>=0?1:-1,n=[i.Mn,i.sQ].indexOf(e)>=0?"y":"x";I[e]+=M[n]*t}))}return I}},7:(e,t,n)=>{"use strict";function i(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}n.d(t,{A:()=>i})},632:(e,t,n)=>{"use strict";function i(e){return e.split("-")[0]}n.d(t,{A:()=>i})},364:(e,t,n)=>{"use strict";function i(){return{top:0,right:0,bottom:0,left:0}}n.d(t,{A:()=>i})},703:(e,t,n)=>{"use strict";function i(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}n.d(t,{A:()=>i})},101:(e,t,n)=>{"use strict";function i(e){return e.split("-")[1]}n.d(t,{A:()=>i})},906:(e,t,n)=>{"use strict";n.d(t,{LI:()=>r,T9:()=>i,jk:()=>s});var i=Math.max,s=Math.min,r=Math.round},318:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var i=n(364);function s(e){return Object.assign({},(0,i.A)(),e)}},398:(e,t,n)=>{"use strict";function i(){var e=navigator.userAgentData;return null!=e&&e.brands&&Array.isArray(e.brands)?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}n.d(t,{A:()=>i})},523:(e,t,n)=>{"use strict";n.d(t,{P:()=>r,u:()=>s});var i=n(906);function s(e,t,n){return(0,i.T9)(e,(0,i.jk)(t,n))}function r(e,t,n){var i=s(e,t,n);return i>n?n:i}},754:function(e,t,n){e.exports=function(e){"use strict";function t(e){const t=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(e)for(const n in e)if("default"!==n){const i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:()=>e[n]})}return t.default=e,Object.freeze(t)}const n=t(e),i=new Map,s={set(e,t,n){i.has(e)||i.set(e,new Map);const s=i.get(e);s.has(t)||0===s.size?s.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(s.keys())[0]}.`)},get:(e,t)=>i.has(e)&&i.get(e).get(t)||null,remove(e,t){if(!i.has(e))return;const n=i.get(e);n.delete(t),0===n.size&&i.delete(e)}},r=1e6,o=1e3,a="transitionend",l=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),c=e=>null==e?`${e}`:Object.prototype.toString.call(e).match(/\s([a-z]+)/i)[1].toLowerCase(),u=e=>{do{e+=Math.floor(Math.random()*r)}while(document.getElementById(e));return e},h=e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),s=Number.parseFloat(n);return i||s?(t=t.split(",")[0],n=n.split(",")[0],(Number.parseFloat(t)+Number.parseFloat(n))*o):0},d=e=>{e.dispatchEvent(new Event(a))},f=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),p=e=>f(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(l(e)):null,g=e=>{if(!f(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},m=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),_=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?_(e.parentNode):null},v=()=>{},b=e=>{e.offsetHeight},y=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,w=[],A=e=>{"loading"===document.readyState?(w.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of w)e()})),w.push(e)):e()},x=()=>"rtl"===document.documentElement.dir,T=e=>{A((()=>{const t=y();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}}))},E=(e,t=[],n=e)=>"function"==typeof e?e(...t):n,C=(e,t,n=!0)=>{if(!n)return void E(e);const i=5,s=h(t)+i;let r=!1;const o=({target:n})=>{n===t&&(r=!0,t.removeEventListener(a,o),E(e))};t.addEventListener(a,o),setTimeout((()=>{r||d(t)}),s)},k=(e,t,n,i)=>{const s=e.length;let r=e.indexOf(t);return-1===r?!n&&i?e[s-1]:e[0]:(r+=n?1:-1,i&&(r=(r+s)%s),e[Math.max(0,Math.min(r,s-1))])},S=/[^.]*(?=\..*)\.|.*/,O=/\..*/,D=/::\d+$/,L={};let N=1;const j={mouseenter:"mouseover",mouseleave:"mouseout"},$=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function I(e,t){return t&&`${t}::${N++}`||e.uidEvent||N++}function P(e){const t=I(e);return e.uidEvent=t,L[t]=L[t]||{},L[t]}function M(e,t){return function n(i){return X(i,{delegateTarget:e}),n.oneOff&&V.off(e,i.type,t),t.apply(e,[i])}}function H(e,t,n){return function i(s){const r=e.querySelectorAll(t);for(let{target:o}=s;o&&o!==this;o=o.parentNode)for(const a of r)if(a===o)return X(s,{delegateTarget:o}),i.oneOff&&V.off(e,s.type,t,n),n.apply(o,[s])}}function q(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function F(e,t,n){const i="string"==typeof t,s=i?n:t||n;let r=z(e);return $.has(r)||(r=e),[i,s,r]}function R(e,t,n,i,s){if("string"!=typeof t||!e)return;let[r,o,a]=F(t,n,i);if(t in j){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};o=e(o)}const l=P(e),c=l[a]||(l[a]={}),u=q(c,o,r?n:null);if(u)return void(u.oneOff=u.oneOff&&s);const h=I(o,t.replace(S,"")),d=r?H(e,n,o):M(e,o);d.delegationSelector=r?n:null,d.callable=o,d.oneOff=s,d.uidEvent=h,c[h]=d,e.addEventListener(a,d,r)}function W(e,t,n,i,s){const r=q(t[n],i,s);r&&(e.removeEventListener(n,r,Boolean(s)),delete t[n][r.uidEvent])}function B(e,t,n,i){const s=t[n]||{};for(const[r,o]of Object.entries(s))r.includes(i)&&W(e,t,n,o.callable,o.delegationSelector)}function z(e){return e=e.replace(O,""),j[e]||e}const V={on(e,t,n,i){R(e,t,n,i,!1)},one(e,t,n,i){R(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[s,r,o]=F(t,n,i),a=o!==t,l=P(e),c=l[o]||{},u=t.startsWith(".");if(void 0===r){if(u)for(const n of Object.keys(l))B(e,l,n,t.slice(1));for(const[n,i]of Object.entries(c)){const s=n.replace(D,"");a&&!t.includes(s)||W(e,l,o,i.callable,i.delegationSelector)}}else{if(!Object.keys(c).length)return;W(e,l,o,r,s?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=y();let s=null,r=!0,o=!0,a=!1;t!==z(t)&&i&&(s=i.Event(t,n),i(e).trigger(s),r=!s.isPropagationStopped(),o=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=X(new Event(t,{bubbles:r,cancelable:!0}),n);return a&&l.preventDefault(),o&&e.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function X(e,t={}){for(const[n,i]of Object.entries(t))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}function Q(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function U(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const Y={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${U(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${U(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=Q(e.dataset[i])}return t},getDataAttribute:(e,t)=>Q(e.getAttribute(`data-bs-${U(t)}`))};class K{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=f(t)?Y.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...f(t)?Y.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[n,i]of Object.entries(t)){const t=e[n],s=f(t)?"element":c(t);if(!new RegExp(i).test(s))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${n}" provided type "${s}" but expected type "${i}".`)}}}const G="5.3.3";class J extends K{constructor(e,t){super(),(e=p(e))&&(this._element=e,this._config=this._getConfig(t),s.set(this._element,this.constructor.DATA_KEY,this))}dispose(){s.remove(this._element,this.constructor.DATA_KEY),V.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){C(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return s.get(p(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return G}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const Z=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return t?t.split(",").map((e=>l(e))).join(","):null},ee={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!m(e)&&g(e)))},getSelectorFromElement(e){const t=Z(e);return t&&ee.findOne(t)?t:null},getElementFromSelector(e){const t=Z(e);return t?ee.findOne(t):null},getMultipleElementsFromSelector(e){const t=Z(e);return t?ee.find(t):[]}},te=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;V.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),m(this))return;const s=ee.getElementFromSelector(this)||this.closest(`.${i}`);e.getOrCreateInstance(s)[t]()}))},ne="alert",ie=".bs.alert",se=`close${ie}`,re=`closed${ie}`,oe="fade",ae="show";class le extends J{static get NAME(){return ne}close(){if(V.trigger(this._element,se).defaultPrevented)return;this._element.classList.remove(ae);const e=this._element.classList.contains(oe);this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),V.trigger(this._element,re),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=le.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}te(le,"close"),T(le);const ce="button",ue="active",he='[data-bs-toggle="button"]',de="click.bs.button.data-api";class fe extends J{static get NAME(){return ce}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle(ue))}static jQueryInterface(e){return this.each((function(){const t=fe.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}V.on(document,de,he,(e=>{e.preventDefault();const t=e.target.closest(he);fe.getOrCreateInstance(t).toggle()})),T(fe);const pe="swipe",ge=".bs.swipe",me=`touchstart${ge}`,_e=`touchmove${ge}`,ve=`touchend${ge}`,be=`pointerdown${ge}`,ye=`pointerup${ge}`,we="touch",Ae="pen",xe="pointer-event",Te=40,Ee={endCallback:null,leftCallback:null,rightCallback:null},Ce={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ke extends K{constructor(e,t){super(),this._element=e,e&&ke.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return Ee}static get DefaultType(){return Ce}static get NAME(){return pe}dispose(){V.off(this._element,ge)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),E(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=Te)return;const t=e/this._deltaX;this._deltaX=0,t&&E(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(V.on(this._element,be,(e=>this._start(e))),V.on(this._element,ye,(e=>this._end(e))),this._element.classList.add(xe)):(V.on(this._element,me,(e=>this._start(e))),V.on(this._element,_e,(e=>this._move(e))),V.on(this._element,ve,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&(e.pointerType===Ae||e.pointerType===we)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const Se="carousel",Oe=".bs.carousel",De=".data-api",Le="ArrowLeft",Ne="ArrowRight",je=500,$e="next",Ie="prev",Pe="left",Me="right",He=`slide${Oe}`,qe=`slid${Oe}`,Fe=`keydown${Oe}`,Re=`mouseenter${Oe}`,We=`mouseleave${Oe}`,Be=`dragstart${Oe}`,ze=`load${Oe}${De}`,Ve=`click${Oe}${De}`,Xe="carousel",Qe="active",Ue="slide",Ye="carousel-item-end",Ke="carousel-item-start",Ge="carousel-item-next",Je="carousel-item-prev",Ze=".active",et=".carousel-item",tt=Ze+et,nt=".carousel-item img",it=".carousel-indicators",st="[data-bs-slide], [data-bs-slide-to]",rt='[data-bs-ride="carousel"]',ot={[Le]:Me,[Ne]:Pe},at={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},lt={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class ct extends J{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=ee.findOne(it,this._element),this._addEventListeners(),this._config.ride===Xe&&this.cycle()}static get Default(){return at}static get DefaultType(){return lt}static get NAME(){return Se}next(){this._slide($e)}nextWhenVisible(){!document.hidden&&g(this._element)&&this.next()}prev(){this._slide(Ie)}pause(){this._isSliding&&d(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?V.one(this._element,qe,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void V.one(this._element,qe,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?$e:Ie;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&V.on(this._element,Fe,(e=>this._keydown(e))),"hover"===this._config.pause&&(V.on(this._element,Re,(()=>this.pause())),V.on(this._element,We,(()=>this._maybeEnableCycle()))),this._config.touch&&ke.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of ee.find(nt,this._element))V.on(e,Be,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(Pe)),rightCallback:()=>this._slide(this._directionToOrder(Me)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),je+this._config.interval))}};this._swipeHelper=new ke(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=ot[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=ee.findOne(Ze,this._indicatorsElement);t.classList.remove(Qe),t.removeAttribute("aria-current");const n=ee.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(Qe),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===$e,s=t||k(this._getItems(),n,i,this._config.wrap);if(s===n)return;const r=this._getItemIndex(s),o=t=>V.trigger(this._element,t,{relatedTarget:s,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:r});if(o(He).defaultPrevented)return;if(!n||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(r),this._activeElement=s;const l=i?Ke:Ye,c=i?Ge:Je;s.classList.add(c),b(s),n.classList.add(l),s.classList.add(l);const u=()=>{s.classList.remove(l,c),s.classList.add(Qe),n.classList.remove(Qe,c,l),this._isSliding=!1,o(qe)};this._queueCallback(u,n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains(Ue)}_getActive(){return ee.findOne(tt,this._element)}_getItems(){return ee.find(et,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return x()?e===Pe?Ie:$e:e===Pe?$e:Ie}_orderToDirection(e){return x()?e===Ie?Pe:Me:e===Ie?Me:Pe}static jQueryInterface(e){return this.each((function(){const t=ct.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}V.on(document,Ve,st,(function(e){const t=ee.getElementFromSelector(this);if(!t||!t.classList.contains(Xe))return;e.preventDefault();const n=ct.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===Y.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),V.on(window,ze,(()=>{const e=ee.find(rt);for(const t of e)ct.getOrCreateInstance(t)})),T(ct);const ut="collapse",ht=".bs.collapse",dt=`show${ht}`,ft=`shown${ht}`,pt=`hide${ht}`,gt=`hidden${ht}`,mt=`click${ht}.data-api`,_t="show",vt="collapse",bt="collapsing",yt="collapsed",wt=`:scope .${vt} .${vt}`,At="collapse-horizontal",xt="width",Tt="height",Et=".collapse.show, .collapse.collapsing",Ct='[data-bs-toggle="collapse"]',kt={parent:null,toggle:!0},St={parent:"(null|element)",toggle:"boolean"};class Ot extends J{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=ee.find(Ct);for(const e of n){const t=ee.getSelectorFromElement(e),n=ee.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return kt}static get DefaultType(){return St}static get NAME(){return ut}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(Et).filter((e=>e!==this._element)).map((e=>Ot.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(V.trigger(this._element,dt).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(vt),this._element.classList.add(bt),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=()=>{this._isTransitioning=!1,this._element.classList.remove(bt),this._element.classList.add(vt,_t),this._element.style[t]="",V.trigger(this._element,ft)},i=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback(n,this._element,!0),this._element.style[t]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(V.trigger(this._element,pt).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,b(this._element),this._element.classList.add(bt),this._element.classList.remove(vt,_t);for(const e of this._triggerArray){const t=ee.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;const t=()=>{this._isTransitioning=!1,this._element.classList.remove(bt),this._element.classList.add(vt),V.trigger(this._element,gt)};this._element.style[e]="",this._queueCallback(t,this._element,!0)}_isShown(e=this._element){return e.classList.contains(_t)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=p(e.parent),e}_getDimension(){return this._element.classList.contains(At)?xt:Tt}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Ct);for(const t of e){const e=ee.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=ee.find(wt,this._config.parent);return ee.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle(yt,!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=Ot.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}V.on(document,mt,Ct,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of ee.getMultipleElementsFromSelector(this))Ot.getOrCreateInstance(e,{toggle:!1}).toggle()})),T(Ot);const Dt="dropdown",Lt=".bs.dropdown",Nt=".data-api",jt="Escape",$t="Tab",It="ArrowUp",Pt="ArrowDown",Mt=2,Ht=`hide${Lt}`,qt=`hidden${Lt}`,Ft=`show${Lt}`,Rt=`shown${Lt}`,Wt=`click${Lt}${Nt}`,Bt=`keydown${Lt}${Nt}`,zt=`keyup${Lt}${Nt}`,Vt="show",Xt="dropup",Qt="dropend",Ut="dropstart",Yt="dropup-center",Kt="dropdown-center",Gt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',Jt=`${Gt}.${Vt}`,Zt=".dropdown-menu",en=".navbar",tn=".navbar-nav",nn=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",sn=x()?"top-end":"top-start",rn=x()?"top-start":"top-end",on=x()?"bottom-end":"bottom-start",an=x()?"bottom-start":"bottom-end",ln=x()?"left-start":"right-start",cn=x()?"right-start":"left-start",un="top",hn="bottom",dn={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},fn={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class pn extends J{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=ee.next(this._element,Zt)[0]||ee.prev(this._element,Zt)[0]||ee.findOne(Zt,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return dn}static get DefaultType(){return fn}static get NAME(){return Dt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(m(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!V.trigger(this._element,Ft,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(tn))for(const e of[].concat(...document.body.children))V.on(e,"mouseover",v);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(Vt),this._element.classList.add(Vt),V.trigger(this._element,Rt,e)}}hide(){if(m(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!V.trigger(this._element,Ht,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))V.off(e,"mouseover",v);this._popper&&this._popper.destroy(),this._menu.classList.remove(Vt),this._element.classList.remove(Vt),this._element.setAttribute("aria-expanded","false"),Y.removeDataAttribute(this._menu,"popper"),V.trigger(this._element,qt,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!f(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Dt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===n)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:f(this._config.reference)?e=p(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=n.createPopper(e,this._menu,t)}_isShown(){return this._menu.classList.contains(Vt)}_getPlacement(){const e=this._parent;if(e.classList.contains(Qt))return ln;if(e.classList.contains(Ut))return cn;if(e.classList.contains(Yt))return un;if(e.classList.contains(Kt))return hn;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains(Xt)?t?rn:sn:t?an:on}_detectNavbar(){return null!==this._element.closest(en)}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(Y.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...E(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const n=ee.find(nn,this._menu).filter((e=>g(e)));n.length&&k(n,t,e===Pt,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=pn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(e.button===Mt||"keyup"===e.type&&e.key!==$t)return;const t=ee.find(Jt);for(const n of t){const t=pn.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),s=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!s||"outside"===t._config.autoClose&&s)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&e.key===$t||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const r={relatedTarget:t._element};"click"===e.type&&(r.clickEvent=e),t._completeHide(r)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n=e.key===jt,i=[It,Pt].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const s=this.matches(Gt)?this:ee.prev(this,Gt)[0]||ee.next(this,Gt)[0]||ee.findOne(Gt,e.delegateTarget.parentNode),r=pn.getOrCreateInstance(s);if(i)return e.stopPropagation(),r.show(),void r._selectMenuItem(e);r._isShown()&&(e.stopPropagation(),r.hide(),s.focus())}}V.on(document,Bt,Gt,pn.dataApiKeydownHandler),V.on(document,Bt,Zt,pn.dataApiKeydownHandler),V.on(document,Wt,pn.clearMenus),V.on(document,zt,pn.clearMenus),V.on(document,Wt,Gt,(function(e){e.preventDefault(),pn.getOrCreateInstance(this).toggle()})),T(pn);const gn="backdrop",mn="fade",_n="show",vn=`mousedown.bs.${gn}`,bn={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},yn={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class wn extends K{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return bn}static get DefaultType(){return yn}static get NAME(){return gn}show(e){if(!this._config.isVisible)return void E(e);this._append();const t=this._getElement();this._config.isAnimated&&b(t),t.classList.add(_n),this._emulateAnimation((()=>{E(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(_n),this._emulateAnimation((()=>{this.dispose(),E(e)}))):E(e)}dispose(){this._isAppended&&(V.off(this._element,vn),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add(mn),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=p(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),V.on(e,vn,(()=>{E(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){C(e,this._getElement(),this._config.isAnimated)}}const An="focustrap",xn=".bs.focustrap",Tn=`focusin${xn}`,En=`keydown.tab${xn}`,Cn="Tab",kn="forward",Sn="backward",On={autofocus:!0,trapElement:null},Dn={autofocus:"boolean",trapElement:"element"};class Ln extends K{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return On}static get DefaultType(){return Dn}static get NAME(){return An}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),V.off(document,xn),V.on(document,Tn,(e=>this._handleFocusin(e))),V.on(document,En,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,V.off(document,xn))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=ee.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===Sn?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){e.key===Cn&&(this._lastTabNavDirection=e.shiftKey?Sn:kn)}}const Nn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",jn=".sticky-top",$n="padding-right",In="margin-right";class Pn{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,$n,(t=>t+e)),this._setElementAttributes(Nn,$n,(t=>t+e)),this._setElementAttributes(jn,In,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,$n),this._resetElementAttributes(Nn,$n),this._resetElementAttributes(jn,In)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth(),s=e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(s))}px`)};this._applyManipulationCallback(e,s)}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&Y.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){const n=e=>{const n=Y.getDataAttribute(e,t);null!==n?(Y.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)};this._applyManipulationCallback(e,n)}_applyManipulationCallback(e,t){if(f(e))t(e);else for(const n of ee.find(e,this._element))t(n)}}const Mn="modal",Hn=".bs.modal",qn="Escape",Fn=`hide${Hn}`,Rn=`hidePrevented${Hn}`,Wn=`hidden${Hn}`,Bn=`show${Hn}`,zn=`shown${Hn}`,Vn=`resize${Hn}`,Xn=`click.dismiss${Hn}`,Qn=`mousedown.dismiss${Hn}`,Un=`keydown.dismiss${Hn}`,Yn=`click${Hn}.data-api`,Kn="modal-open",Gn="fade",Jn="show",Zn="modal-static",ei=".modal.show",ti=".modal-dialog",ni=".modal-body",ii='[data-bs-toggle="modal"]',si={backdrop:!0,focus:!0,keyboard:!0},ri={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class oi extends J{constructor(e,t){super(e,t),this._dialog=ee.findOne(ti,this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Pn,this._addEventListeners()}static get Default(){return si}static get DefaultType(){return ri}static get NAME(){return Mn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||V.trigger(this._element,Bn,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Kn),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){this._isShown&&!this._isTransitioning&&(V.trigger(this._element,Fn).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Jn),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated())))}dispose(){V.off(window,Hn),V.off(this._dialog,Hn),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new wn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Ln({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=ee.findOne(ni,this._dialog);t&&(t.scrollTop=0),b(this._element),this._element.classList.add(Jn);const n=()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,V.trigger(this._element,zn,{relatedTarget:e})};this._queueCallback(n,this._dialog,this._isAnimated())}_addEventListeners(){V.on(this._element,Un,(e=>{e.key===qn&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),V.on(window,Vn,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),V.on(this._element,Qn,(e=>{V.one(this._element,Xn,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Kn),this._resetAdjustments(),this._scrollBar.reset(),V.trigger(this._element,Wn)}))}_isAnimated(){return this._element.classList.contains(Gn)}_triggerBackdropTransition(){if(V.trigger(this._element,Rn).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Zn)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Zn),this._queueCallback((()=>{this._element.classList.remove(Zn),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=x()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=x()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=oi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}V.on(document,Yn,ii,(function(e){const t=ee.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),V.one(t,Bn,(e=>{e.defaultPrevented||V.one(t,Wn,(()=>{g(this)&&this.focus()}))}));const n=ee.findOne(ei);n&&oi.getInstance(n).hide(),oi.getOrCreateInstance(t).toggle(this)})),te(oi),T(oi);const ai="offcanvas",li=".bs.offcanvas",ci=".data-api",ui=`load${li}${ci}`,hi="Escape",di="show",fi="showing",pi="hiding",gi="offcanvas-backdrop",mi=".offcanvas.show",_i=`show${li}`,vi=`shown${li}`,bi=`hide${li}`,yi=`hidePrevented${li}`,wi=`hidden${li}`,Ai=`resize${li}`,xi=`click${li}${ci}`,Ti=`keydown.dismiss${li}`,Ei='[data-bs-toggle="offcanvas"]',Ci={backdrop:!0,keyboard:!0,scroll:!1},ki={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class Si extends J{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return Ci}static get DefaultType(){return ki}static get NAME(){return ai}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if(V.trigger(this._element,_i,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Pn).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(fi);const t=()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(di),this._element.classList.remove(fi),V.trigger(this._element,vi,{relatedTarget:e})};this._queueCallback(t,this._element,!0)}hide(){if(!this._isShown)return;if(V.trigger(this._element,bi).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(pi),this._backdrop.hide();const e=()=>{this._element.classList.remove(di,pi),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Pn).reset(),V.trigger(this._element,wi)};this._queueCallback(e,this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=()=>{"static"!==this._config.backdrop?this.hide():V.trigger(this._element,yi)},t=Boolean(this._config.backdrop);return new wn({className:gi,isVisible:t,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:t?e:null})}_initializeFocusTrap(){return new Ln({trapElement:this._element})}_addEventListeners(){V.on(this._element,Ti,(e=>{e.key===hi&&(this._config.keyboard?this.hide():V.trigger(this._element,yi))}))}static jQueryInterface(e){return this.each((function(){const t=Si.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}V.on(document,xi,Ei,(function(e){const t=ee.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),m(this))return;V.one(t,wi,(()=>{g(this)&&this.focus()}));const n=ee.findOne(mi);n&&n!==t&&Si.getInstance(n).hide(),Si.getOrCreateInstance(t).toggle(this)})),V.on(window,ui,(()=>{for(const e of ee.find(mi))Si.getOrCreateInstance(e).show()})),V.on(window,Ai,(()=>{for(const e of ee.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&Si.getOrCreateInstance(e).hide()})),te(Si),T(Si);const Oi={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},Di=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Li=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,Ni=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!Di.has(n)||Boolean(Li.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))};function ji(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...i.body.querySelectorAll("*"));for(const e of s){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),s=[].concat(t["*"]||[],t[n]||[]);for(const t of i)Ni(t,s)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}const $i="TemplateFactory",Ii={allowList:Oi,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Pi={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Mi={entry:"(string|element|function|null)",selector:"(string|element)"};class Hi extends K{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Ii}static get DefaultType(){return Pi}static get NAME(){return $i}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},Mi)}_setContent(e,t,n){const i=ee.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?f(t)?this._putElementInTemplate(p(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?ji(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return E(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const qi="tooltip",Fi=new Set(["sanitize","allowList","sanitizeFn"]),Ri="fade",Wi="show",Bi=".tooltip-inner",zi=".modal",Vi="hide.bs.modal",Xi="hover",Qi="focus",Ui="click",Yi="manual",Ki="hide",Gi="hidden",Ji="show",Zi="shown",es="inserted",ts="click",ns="focusin",is="focusout",ss="mouseenter",rs="mouseleave",os={AUTO:"auto",TOP:"top",RIGHT:x()?"left":"right",BOTTOM:"bottom",LEFT:x()?"right":"left"},as={allowList:Oi,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},ls={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class cs extends J{constructor(e,t){if(void 0===n)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return as}static get DefaultType(){return ls}static get NAME(){return qi}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),V.off(this._element.closest(zi),Vi,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=V.trigger(this._element,this.constructor.eventName(Ji)),t=(_(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),V.trigger(this._element,this.constructor.eventName(es))),this._popper=this._createPopper(n),n.classList.add(Wi),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))V.on(e,"mouseover",v);const s=()=>{V.trigger(this._element,this.constructor.eventName(Zi)),!1===this._isHovered&&this._leave(),this._isHovered=!1};this._queueCallback(s,this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(V.trigger(this._element,this.constructor.eventName(Ki)).defaultPrevented)return;if(this._getTipElement().classList.remove(Wi),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))V.off(e,"mouseover",v);this._activeTrigger[Ui]=!1,this._activeTrigger[Qi]=!1,this._activeTrigger[Xi]=!1,this._isHovered=null;const e=()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),V.trigger(this._element,this.constructor.eventName(Gi)))};this._queueCallback(e,this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(Ri,Wi),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=u(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(Ri),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new Hi({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[Bi]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Ri)}_isShown(){return this.tip&&this.tip.classList.contains(Wi)}_createPopper(e){const t=E(this._config.placement,[this,e,this._element]),i=os[t.toUpperCase()];return n.createPopper(this._element,e,this._getPopperConfig(i))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return E(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...E(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)V.on(this._element,this.constructor.eventName(ts),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if(t!==Yi){const e=t===Xi?this.constructor.eventName(ss):this.constructor.eventName(ns),n=t===Xi?this.constructor.eventName(rs):this.constructor.eventName(is);V.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Qi:Xi]=!0,t._enter()})),V.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Qi:Xi]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},V.on(this._element.closest(zi),Vi,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=Y.getDataAttributes(this._element);for(const e of Object.keys(t))Fi.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:p(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,n]of Object.entries(this._config))this.constructor.Default[t]!==n&&(e[t]=n);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=cs.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}T(cs);const us="popover",hs=".popover-header",ds=".popover-body",fs={...cs.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},ps={...cs.DefaultType,content:"(null|string|element|function)"};class gs extends cs{static get Default(){return fs}static get DefaultType(){return ps}static get NAME(){return us}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[hs]:this._getTitle(),[ds]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=gs.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}T(gs);const ms="scrollspy",_s=".bs.scrollspy",vs=`activate${_s}`,bs=`click${_s}`,ys=`load${_s}.data-api`,ws="dropdown-item",As="active",xs='[data-bs-spy="scroll"]',Ts="[href]",Es=".nav, .list-group",Cs=".nav-link",ks=`${Cs}, .nav-item > ${Cs}, .list-group-item`,Ss=".dropdown",Os=".dropdown-toggle",Ds={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Ls={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Ns extends J{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Ds}static get DefaultType(){return Ls}static get NAME(){return ms}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=p(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(V.off(this._config.target,bs),V.on(this._config.target,bs,Ts,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,s=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const r of e){if(!r.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(r));continue}const e=r.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&e){if(n(r),!i)return}else s||e||n(r)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=ee.find(Ts,this._config.target);for(const t of e){if(!t.hash||m(t))continue;const e=ee.findOne(decodeURI(t.hash),this._element);g(e)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(As),this._activateParents(e),V.trigger(this._element,vs,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains(ws))ee.findOne(Os,e.closest(Ss)).classList.add(As);else for(const t of ee.parents(e,Es))for(const e of ee.prev(t,ks))e.classList.add(As)}_clearActiveClass(e){e.classList.remove(As);const t=ee.find(`${Ts}.${As}`,e);for(const e of t)e.classList.remove(As)}static jQueryInterface(e){return this.each((function(){const t=Ns.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}V.on(window,ys,(()=>{for(const e of ee.find(xs))Ns.getOrCreateInstance(e)})),T(Ns);const js="tab",$s=".bs.tab",Is=`hide${$s}`,Ps=`hidden${$s}`,Ms=`show${$s}`,Hs=`shown${$s}`,qs=`click${$s}`,Fs=`keydown${$s}`,Rs=`load${$s}`,Ws="ArrowLeft",Bs="ArrowRight",zs="ArrowUp",Vs="ArrowDown",Xs="Home",Qs="End",Us="active",Ys="fade",Ks="show",Gs="dropdown",Js=".dropdown-toggle",Zs=".dropdown-menu",er=`:not(${Js})`,tr='.list-group, .nav, [role="tablist"]',nr=".nav-item, .list-group-item",ir='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',sr=`.nav-link${er}, .list-group-item${er}, [role="tab"]${er}, ${ir}`,rr=`.${Us}[data-bs-toggle="tab"], .${Us}[data-bs-toggle="pill"], .${Us}[data-bs-toggle="list"]`;class or extends J{constructor(e){super(e),this._parent=this._element.closest(tr),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),V.on(this._element,Fs,(e=>this._keydown(e))))}static get NAME(){return js}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?V.trigger(t,Is,{relatedTarget:e}):null;V.trigger(e,Ms,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(Us),this._activate(ee.getElementFromSelector(e));const n=()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),V.trigger(e,Hs,{relatedTarget:t})):e.classList.add(Ks)};this._queueCallback(n,e,e.classList.contains(Ys))}_deactivate(e,t){if(!e)return;e.classList.remove(Us),e.blur(),this._deactivate(ee.getElementFromSelector(e));const n=()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),V.trigger(e,Ps,{relatedTarget:t})):e.classList.remove(Ks)};this._queueCallback(n,e,e.classList.contains(Ys))}_keydown(e){if(![Ws,Bs,zs,Vs,Xs,Qs].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter((e=>!m(e)));let n;if([Xs,Qs].includes(e.key))n=t[e.key===Xs?0:t.length-1];else{const i=[Bs,Vs].includes(e.key);n=k(t,e.target,i,!0)}n&&(n.focus({preventScroll:!0}),or.getOrCreateInstance(n).show())}_getChildren(){return ee.find(sr,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=ee.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains(Gs))return;const i=(e,i)=>{const s=ee.findOne(e,n);s&&s.classList.toggle(i,t)};i(Js,Us),i(Zs,Ks),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(Us)}_getInnerElement(e){return e.matches(sr)?e:ee.findOne(sr,e)}_getOuterElement(e){return e.closest(nr)||e}static jQueryInterface(e){return this.each((function(){const t=or.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}V.on(document,qs,ir,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),m(this)||or.getOrCreateInstance(this).show()})),V.on(window,Rs,(()=>{for(const e of ee.find(rr))or.getOrCreateInstance(e)})),T(or);const ar="toast",lr=".bs.toast",cr=`mouseover${lr}`,ur=`mouseout${lr}`,hr=`focusin${lr}`,dr=`focusout${lr}`,fr=`hide${lr}`,pr=`hidden${lr}`,gr=`show${lr}`,mr=`shown${lr}`,_r="fade",vr="hide",br="show",yr="showing",wr={animation:"boolean",autohide:"boolean",delay:"number"},Ar={animation:!0,autohide:!0,delay:5e3};class xr extends J{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Ar}static get DefaultType(){return wr}static get NAME(){return ar}show(){if(V.trigger(this._element,gr).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add(_r);const e=()=>{this._element.classList.remove(yr),V.trigger(this._element,mr),this._maybeScheduleHide()};this._element.classList.remove(vr),b(this._element),this._element.classList.add(br,yr),this._queueCallback(e,this._element,this._config.animation)}hide(){if(!this.isShown())return;if(V.trigger(this._element,fr).defaultPrevented)return;const e=()=>{this._element.classList.add(vr),this._element.classList.remove(yr,br),V.trigger(this._element,pr)};this._element.classList.add(yr),this._queueCallback(e,this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(br),super.dispose()}isShown(){return this._element.classList.contains(br)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){V.on(this._element,cr,(e=>this._onInteraction(e,!0))),V.on(this._element,ur,(e=>this._onInteraction(e,!1))),V.on(this._element,hr,(e=>this._onInteraction(e,!0))),V.on(this._element,dr,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=xr.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}return te(xr),T(xr),{Alert:le,Button:fe,Carousel:ct,Collapse:Ot,Dropdown:pn,Modal:oi,Offcanvas:Si,Popover:gs,ScrollSpy:Ns,Tab:or,Toast:xr,Tooltip:cs}}(n(11))},692:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,s){"use strict";var r=[],o=Object.getPrototypeOf,a=r.slice,l=r.flat?function(e){return r.flat.call(e)}:function(e){return r.concat.apply([],e)},c=r.push,u=r.indexOf,h={},d=h.toString,f=h.hasOwnProperty,p=f.toString,g=p.call(Object),m={},_=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},v=function(e){return null!=e&&e===e.window},b=i.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,s,r=(n=n||b).createElement("script");if(r.text=e,t)for(i in y)(s=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,s);n.head.appendChild(r).parentNode.removeChild(r)}function A(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?h[d.call(e)]||"object":typeof e}var x="3.7.1",T=/HTML$/i,E=function(e,t){return new E.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=A(e);return!_(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}E.fn=E.prototype={jquery:x,constructor:E,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(E.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:r.sort,splice:r.splice},E.extend=E.fn.extend=function(){var e,t,n,i,s,r,o=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[a]||{},a++),"object"==typeof o||_(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=e[t],"__proto__"!==t&&o!==i&&(c&&i&&(E.isPlainObject(i)||(s=Array.isArray(i)))?(n=o[t],r=s&&!Array.isArray(n)?[]:s||E.isPlainObject(n)?n:{},s=!1,o[t]=E.extend(c,r,i)):void 0!==i&&(o[t]=i));return o},E.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=o(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},text:function(e){var t,n="",i=0,s=e.nodeType;if(!s)for(;t=e[i++];)n+=E.text(t);return 1===s||11===s?e.textContent:9===s?e.documentElement.textContent:3===s||4===s?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?E.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!T.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,i=0,s=e.length;i<n;i++)e[s++]=t[i];return e.length=s,e},grep:function(e,t,n){for(var i=[],s=0,r=e.length,o=!n;s<r;s++)!t(e[s],s)!==o&&i.push(e[s]);return i},map:function(e,t,n){var i,s,r=0,o=[];if(C(e))for(i=e.length;r<i;r++)null!=(s=t(e[r],r,n))&&o.push(s);else for(r in e)null!=(s=t(e[r],r,n))&&o.push(s);return l(o)},guid:1,support:m}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=r[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){h["[object "+t+"]"]=t.toLowerCase()}));var S=r.pop,O=r.sort,D=r.splice,L="[\\x20\\t\\r\\n\\f]",N=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g");E.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var j=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function $(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}E.escapeSelector=function(e){return(e+"").replace(j,$)};var I=b,P=c;!function(){var e,t,n,s,o,l,c,h,d,p,g=P,_=E.expando,v=0,b=0,y=ee(),w=ee(),A=ee(),x=ee(),T=function(e,t){return e===t&&(o=!0),0},C="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="(?:\\\\[\\da-fA-F]{1,6}"+L+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",$="\\["+L+"*("+j+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+L+"*\\]",M=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",H=new RegExp(L+"+","g"),q=new RegExp("^"+L+"*,"+L+"*"),F=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),R=new RegExp(L+"|>"),W=new RegExp(M),B=new RegExp("^"+j+"$"),z={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+M),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+C+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,U=/[+~]/,Y=new RegExp("\\\\[\\da-fA-F]{1,6}"+L+"?|\\\\([^\\r\\n\\f])","g"),K=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},G=function(){le()},J=de((function(e){return!0===e.disabled&&k(e,"fieldset")}),{dir:"parentNode",next:"legend"});try{g.apply(r=a.call(I.childNodes),I.childNodes),r[I.childNodes.length].nodeType}catch(e){g={apply:function(e,t){P.apply(e,a.call(t))},call:function(e){P.apply(e,a.call(arguments,1))}}}function Z(e,t,n,i){var s,r,o,a,c,u,f,p=t&&t.ownerDocument,v=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==v&&9!==v&&11!==v)return n;if(!i&&(le(t),t=t||l,h)){if(11!==v&&(c=Q.exec(e)))if(s=c[1]){if(9===v){if(!(o=t.getElementById(s)))return n;if(o.id===s)return g.call(n,o),n}else if(p&&(o=p.getElementById(s))&&Z.contains(t,o)&&o.id===s)return g.call(n,o),n}else{if(c[2])return g.apply(n,t.getElementsByTagName(e)),n;if((s=c[3])&&t.getElementsByClassName)return g.apply(n,t.getElementsByClassName(s)),n}if(!(x[e+" "]||d&&d.test(e))){if(f=e,p=t,1===v&&(R.test(e)||F.test(e))){for((p=U.test(e)&&ae(t.parentNode)||t)==t&&m.scope||((a=t.getAttribute("id"))?a=E.escapeSelector(a):t.setAttribute("id",a=_)),r=(u=ue(e)).length;r--;)u[r]=(a?"#"+a:":scope")+" "+he(u[r]);f=u.join(",")}try{return g.apply(n,p.querySelectorAll(f)),n}catch(t){x(e,!0)}finally{a===_&&t.removeAttribute("id")}}}return ve(e.replace(N,"$1"),t,n,i)}function ee(){var e=[];return function n(i,s){return e.push(i+" ")>t.cacheLength&&delete n[e.shift()],n[i+" "]=s}}function te(e){return e[_]=!0,e}function ne(e){var t=l.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ie(e){return function(t){return k(t,"input")&&t.type===e}}function se(e){return function(t){return(k(t,"input")||k(t,"button"))&&t.type===e}}function re(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&J(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function oe(e){return te((function(t){return t=+t,te((function(n,i){for(var s,r=e([],n.length,t),o=r.length;o--;)n[s=r[o]]&&(n[s]=!(i[s]=n[s]))}))}))}function ae(e){return e&&void 0!==e.getElementsByTagName&&e}function le(e){var n,i=e?e.ownerDocument||e:I;return i!=l&&9===i.nodeType&&i.documentElement?(c=(l=i).documentElement,h=!E.isXMLDoc(l),p=c.matches||c.webkitMatchesSelector||c.msMatchesSelector,c.msMatchesSelector&&I!=l&&(n=l.defaultView)&&n.top!==n&&n.addEventListener("unload",G),m.getById=ne((function(e){return c.appendChild(e).id=E.expando,!l.getElementsByName||!l.getElementsByName(E.expando).length})),m.disconnectedMatch=ne((function(e){return p.call(e,"*")})),m.scope=ne((function(){return l.querySelectorAll(":scope")})),m.cssHas=ne((function(){try{return l.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}})),m.getById?(t.filter.ID=function(e){var t=e.replace(Y,K);return function(e){return e.getAttribute("id")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&h){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(Y,K);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&h){var n,i,s,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(s=t.getElementsByName(e),i=0;r=s[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&h)return t.getElementsByClassName(e)},d=[],ne((function(e){var t;c.appendChild(e).innerHTML="<a id='"+_+"' href='' disabled='disabled'></a><select id='"+_+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||d.push("\\["+L+"*(?:value|"+C+")"),e.querySelectorAll("[id~="+_+"-]").length||d.push("~="),e.querySelectorAll("a#"+_+"+*").length||d.push(".#.+[+~]"),e.querySelectorAll(":checked").length||d.push(":checked"),(t=l.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),c.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&d.push(":enabled",":disabled"),(t=l.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||d.push("\\["+L+"*name"+L+"*="+L+"*(?:''|\"\")")})),m.cssHas||d.push(":has"),d=d.length&&new RegExp(d.join("|")),T=function(e,t){if(e===t)return o=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!m.sortDetached&&t.compareDocumentPosition(e)===n?e===l||e.ownerDocument==I&&Z.contains(I,e)?-1:t===l||t.ownerDocument==I&&Z.contains(I,t)?1:s?u.call(s,e)-u.call(s,t):0:4&n?-1:1)},l):l}for(e in Z.matches=function(e,t){return Z(e,null,null,t)},Z.matchesSelector=function(e,t){if(le(e),h&&!x[t+" "]&&(!d||!d.test(t)))try{var n=p.call(e,t);if(n||m.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){x(t,!0)}return Z(t,l,null,[e]).length>0},Z.contains=function(e,t){return(e.ownerDocument||e)!=l&&le(e),E.contains(e,t)},Z.attr=function(e,n){(e.ownerDocument||e)!=l&&le(e);var i=t.attrHandle[n.toLowerCase()],s=i&&f.call(t.attrHandle,n.toLowerCase())?i(e,n,!h):void 0;return void 0!==s?s:e.getAttribute(n)},Z.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},E.uniqueSort=function(e){var t,n=[],i=0,r=0;if(o=!m.sortStable,s=!m.sortStable&&a.call(e,0),O.call(e,T),o){for(;t=e[r++];)t===e[r]&&(i=n.push(r));for(;i--;)D.call(e,n[i],1)}return s=null,e},E.fn.uniqueSort=function(){return this.pushStack(E.uniqueSort(a.apply(this)))},t=E.expr={cacheLength:50,createPseudo:te,match:z,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Y,K),e[3]=(e[3]||e[4]||e[5]||"").replace(Y,K),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||Z.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&Z.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=ue(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Y,K).toLowerCase();return"*"===e?function(){return!0}:function(e){return k(e,t)}},CLASS:function(e){var t=y[e+" "];return t||(t=new RegExp("(^|"+L+")"+e+"("+L+"|$)"))&&y(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var s=Z.attr(i,e);return null==s?"!="===t:!t||(s+="","="===t?s===n:"!="===t?s!==n:"^="===t?n&&0===s.indexOf(n):"*="===t?n&&s.indexOf(n)>-1:"$="===t?n&&s.slice(-n.length)===n:"~="===t?(" "+s.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,s){var r="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===s?function(e){return!!e.parentNode}:function(t,n,l){var c,u,h,d,f,p=r!==o?"nextSibling":"previousSibling",g=t.parentNode,m=a&&t.nodeName.toLowerCase(),b=!l&&!a,y=!1;if(g){if(r){for(;p;){for(h=t;h=h[p];)if(a?k(h,m):1===h.nodeType)return!1;f=p="only"===e&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&b){for(y=(d=(c=(u=g[_]||(g[_]={}))[e]||[])[0]===v&&c[1])&&c[2],h=d&&g.childNodes[d];h=++d&&h&&h[p]||(y=d=0)||f.pop();)if(1===h.nodeType&&++y&&h===t){u[e]=[v,d,y];break}}else if(b&&(y=d=(c=(u=t[_]||(t[_]={}))[e]||[])[0]===v&&c[1]),!1===y)for(;(h=++d&&h&&h[p]||(y=d=0)||f.pop())&&(!(a?k(h,m):1===h.nodeType)||!++y||(b&&((u=h[_]||(h[_]={}))[e]=[v,y]),h!==t)););return(y-=s)===i||y%i==0&&y/i>=0}}},PSEUDO:function(e,n){var i,s=t.pseudos[e]||t.setFilters[e.toLowerCase()]||Z.error("unsupported pseudo: "+e);return s[_]?s(n):s.length>1?(i=[e,e,"",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te((function(e,t){for(var i,r=s(e,n),o=r.length;o--;)e[i=u.call(e,r[o])]=!(t[i]=r[o])})):function(e){return s(e,0,i)}):s}},pseudos:{not:te((function(e){var t=[],n=[],i=_e(e.replace(N,"$1"));return i[_]?te((function(e,t,n,s){for(var r,o=i(e,null,s,[]),a=e.length;a--;)(r=o[a])&&(e[a]=!(t[a]=r))})):function(e,s,r){return t[0]=e,i(t,null,r,n),t[0]=null,!n.pop()}})),has:te((function(e){return function(t){return Z(e,t).length>0}})),contains:te((function(e){return e=e.replace(Y,K),function(t){return(t.textContent||E.text(t)).indexOf(e)>-1}})),lang:te((function(e){return B.test(e||"")||Z.error("unsupported lang: "+e),e=e.replace(Y,K).toLowerCase(),function(t){var n;do{if(n=h?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=i.location&&i.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===c},focus:function(e){return e===function(){try{return l.activeElement}catch(e){}}()&&l.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:re(!1),disabled:re(!0),checked:function(e){return k(e,"input")&&!!e.checked||k(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return X.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){return k(e,"input")&&"button"===e.type||k(e,"button")},text:function(e){var t;return k(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:oe((function(){return[0]})),last:oe((function(e,t){return[t-1]})),eq:oe((function(e,t,n){return[n<0?n+t:n]})),even:oe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:oe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:oe((function(e,t,n){var i;for(i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:oe((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=ie(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=se(e);function ce(){}function ue(e,n){var i,s,r,o,a,l,c,u=w[e+" "];if(u)return n?0:u.slice(0);for(a=e,l=[],c=t.preFilter;a;){for(o in i&&!(s=q.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(r=[])),i=!1,(s=F.exec(a))&&(i=s.shift(),r.push({value:i,type:s[0].replace(N," ")}),a=a.slice(i.length)),t.filter)!(s=z[o].exec(a))||c[o]&&!(s=c[o](s))||(i=s.shift(),r.push({value:i,type:o,matches:s}),a=a.slice(i.length));if(!i)break}return n?a.length:a?Z.error(e):w(e,l).slice(0)}function he(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function de(e,t,n){var i=t.dir,s=t.next,r=s||i,o=n&&"parentNode"===r,a=b++;return t.first?function(t,n,s){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,s);return!1}:function(t,n,l){var c,u,h=[v,a];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(u=t[_]||(t[_]={}),s&&k(t,s))t=t[i]||t;else{if((c=u[r])&&c[0]===v&&c[1]===a)return h[2]=c[2];if(u[r]=h,h[2]=e(t,n,l))return!0}return!1}}function fe(e){return e.length>1?function(t,n,i){for(var s=e.length;s--;)if(!e[s](t,n,i))return!1;return!0}:e[0]}function pe(e,t,n,i,s){for(var r,o=[],a=0,l=e.length,c=null!=t;a<l;a++)(r=e[a])&&(n&&!n(r,i,s)||(o.push(r),c&&t.push(a)));return o}function ge(e,t,n,i,s,r){return i&&!i[_]&&(i=ge(i)),s&&!s[_]&&(s=ge(s,r)),te((function(r,o,a,l){var c,h,d,f,p=[],m=[],_=o.length,v=r||function(e,t,n){for(var i=0,s=t.length;i<s;i++)Z(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),b=!e||!r&&t?v:pe(v,p,e,a,l);if(n?n(b,f=s||(r?e:_||i)?[]:o,a,l):f=b,i)for(c=pe(f,m),i(c,[],a,l),h=c.length;h--;)(d=c[h])&&(f[m[h]]=!(b[m[h]]=d));if(r){if(s||e){if(s){for(c=[],h=f.length;h--;)(d=f[h])&&c.push(b[h]=d);s(null,f=[],c,l)}for(h=f.length;h--;)(d=f[h])&&(c=s?u.call(r,d):p[h])>-1&&(r[c]=!(o[c]=d))}}else f=pe(f===o?f.splice(_,f.length):f),s?s(null,o,f,l):g.apply(o,f)}))}function me(e){for(var i,s,r,o=e.length,a=t.relative[e[0].type],l=a||t.relative[" "],c=a?1:0,h=de((function(e){return e===i}),l,!0),d=de((function(e){return u.call(i,e)>-1}),l,!0),f=[function(e,t,s){var r=!a&&(s||t!=n)||((i=t).nodeType?h(e,t,s):d(e,t,s));return i=null,r}];c<o;c++)if(s=t.relative[e[c].type])f=[de(fe(f),s)];else{if((s=t.filter[e[c].type].apply(null,e[c].matches))[_]){for(r=++c;r<o&&!t.relative[e[r].type];r++);return ge(c>1&&fe(f),c>1&&he(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(N,"$1"),s,c<r&&me(e.slice(c,r)),r<o&&me(e=e.slice(r)),r<o&&he(e))}f.push(s)}return fe(f)}function _e(e,i){var s,r=[],o=[],a=A[e+" "];if(!a){for(i||(i=ue(e)),s=i.length;s--;)(a=me(i[s]))[_]?r.push(a):o.push(a);a=A(e,function(e,i){var s=i.length>0,r=e.length>0,o=function(o,a,c,u,d){var f,p,m,_=0,b="0",y=o&&[],w=[],A=n,x=o||r&&t.find.TAG("*",d),T=v+=null==A?1:Math.random()||.1,C=x.length;for(d&&(n=a==l||a||d);b!==C&&null!=(f=x[b]);b++){if(r&&f){for(p=0,a||f.ownerDocument==l||(le(f),c=!h);m=e[p++];)if(m(f,a||l,c)){g.call(u,f);break}d&&(v=T)}s&&((f=!m&&f)&&_--,o&&y.push(f))}if(_+=b,s&&b!==_){for(p=0;m=i[p++];)m(y,w,a,c);if(o){if(_>0)for(;b--;)y[b]||w[b]||(w[b]=S.call(u));w=pe(w)}g.apply(u,w),d&&!o&&w.length>0&&_+i.length>1&&E.uniqueSort(u)}return d&&(v=T,n=A),y};return s?te(o):o}(o,r)),a.selector=e}return a}function ve(e,n,i,s){var r,o,a,l,c,u="function"==typeof e&&e,d=!s&&ue(e=u.selector||e);if(i=i||[],1===d.length){if((o=d[0]=d[0].slice(0)).length>2&&"ID"===(a=o[0]).type&&9===n.nodeType&&h&&t.relative[o[1].type]){if(!(n=(t.find.ID(a.matches[0].replace(Y,K),n)||[])[0]))return i;u&&(n=n.parentNode),e=e.slice(o.shift().value.length)}for(r=z.needsContext.test(e)?0:o.length;r--&&(a=o[r],!t.relative[l=a.type]);)if((c=t.find[l])&&(s=c(a.matches[0].replace(Y,K),U.test(o[0].type)&&ae(n.parentNode)||n))){if(o.splice(r,1),!(e=s.length&&he(o)))return g.apply(i,s),i;break}}return(u||_e(e,d))(s,n,!h,i,!n||U.test(e)&&ae(n.parentNode)||n),i}ce.prototype=t.filters=t.pseudos,t.setFilters=new ce,m.sortStable=_.split("").sort(T).join("")===_,le(),m.sortDetached=ne((function(e){return 1&e.compareDocumentPosition(l.createElement("fieldset"))})),E.find=Z,E.expr[":"]=E.expr.pseudos,E.unique=E.uniqueSort,Z.compile=_e,Z.select=ve,Z.setDocument=le,Z.tokenize=ue,Z.escape=E.escapeSelector,Z.getText=E.text,Z.isXML=E.isXMLDoc,Z.selectors=E.expr,Z.support=E.support,Z.uniqueSort=E.uniqueSort}();var M=function(e,t,n){for(var i=[],s=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(s&&E(e).is(n))break;i.push(e)}return i},H=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},q=E.expr.match.needsContext,F=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function R(e,t,n){return _(t)?E.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?E.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?E.grep(e,(function(e){return u.call(t,e)>-1!==n})):E.filter(t,e,n)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,(function(e){return 1===e.nodeType})))},E.fn.extend({find:function(e){var t,n,i=this.length,s=this;if("string"!=typeof e)return this.pushStack(E(e).filter((function(){for(t=0;t<i;t++)if(E.contains(s[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,s[t],n);return i>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(R(this,e||[],!1))},not:function(e){return this.pushStack(R(this,e||[],!0))},is:function(e){return!!R(this,"string"==typeof e&&q.test(e)?E(e):e||[],!1).length}});var W,B=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,s;if(!e)return this;if(n=n||W,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:B.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),F.test(i[1])&&E.isPlainObject(t))for(i in t)_(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(s=b.getElementById(i[2]))&&(this[0]=s,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):_(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,W=E(b);var z=/^(?:parents|prev(?:Until|All))/,V={children:!0,contents:!0,next:!0,prev:!0};function X(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,s=this.length,r=[],o="string"!=typeof e&&E(e);if(!q.test(e))for(;i<s;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(r.length>1?E.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?u.call(E(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return M(e,"parentNode")},parentsUntil:function(e,t,n){return M(e,"parentNode",n)},next:function(e){return X(e,"nextSibling")},prev:function(e){return X(e,"previousSibling")},nextAll:function(e){return M(e,"nextSibling")},prevAll:function(e){return M(e,"previousSibling")},nextUntil:function(e,t,n){return M(e,"nextSibling",n)},prevUntil:function(e,t,n){return M(e,"previousSibling",n)},siblings:function(e){return H((e.parentNode||{}).firstChild,e)},children:function(e){return H(e.firstChild)},contents:function(e){return null!=e.contentDocument&&o(e.contentDocument)?e.contentDocument:(k(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},(function(e,t){E.fn[e]=function(n,i){var s=E.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(s=E.filter(i,s)),this.length>1&&(V[e]||E.uniqueSort(s),z.test(e)&&s.reverse()),this.pushStack(s)}}));var Q=/[^\x20\t\r\n\f]+/g;function U(e){return e}function Y(e){throw e}function K(e,t,n,i){var s;try{e&&_(s=e.promise)?s.call(e).done(t).fail(n):e&&_(s=e.then)?s.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(Q)||[],(function(e,n){t[n]=!0})),t}(e):E.extend({},e);var t,n,i,s,r=[],o=[],a=-1,l=function(){for(s=s||e.once,i=t=!0;o.length;a=-1)for(n=o.shift();++a<r.length;)!1===r[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=r.length,n=!1);e.memory||(n=!1),t=!1,s&&(r=n?[]:"")},c={add:function(){return r&&(n&&!t&&(a=r.length-1,o.push(n)),function t(n){E.each(n,(function(n,i){_(i)?e.unique&&c.has(i)||r.push(i):i&&i.length&&"string"!==A(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return E.each(arguments,(function(e,t){for(var n;(n=E.inArray(t,r,n))>-1;)r.splice(n,1),n<=a&&a--})),this},has:function(e){return e?E.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return s=o=[],r=n="",this},disabled:function(){return!r},lock:function(){return s=o=[],n||t||(r=n=""),this},locked:function(){return!!s},fireWith:function(e,n){return s||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return r.done(arguments).fail(arguments),this},catch:function(e){return s.then(null,e)},pipe:function(){var e=arguments;return E.Deferred((function(n){E.each(t,(function(t,i){var s=_(e[i[4]])&&e[i[4]];r[i[1]]((function(){var e=s&&s.apply(this,arguments);e&&_(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,s?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,s){var r=0;function o(e,t,n,s){return function(){var a=this,l=arguments,c=function(){var i,c;if(!(e<r)){if((i=n.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,_(c)?s?c.call(i,o(r,t,U,s),o(r,t,Y,s)):(r++,c.call(i,o(r,t,U,s),o(r,t,Y,s),o(r,t,U,t.notifyWith))):(n!==U&&(a=void 0,l=[i]),(s||t.resolveWith)(a,l))}},u=s?c:function(){try{c()}catch(i){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(i,u.error),e+1>=r&&(n!==Y&&(a=void 0,l=[i]),t.rejectWith(a,l))}};e?u():(E.Deferred.getErrorHook?u.error=E.Deferred.getErrorHook():E.Deferred.getStackHook&&(u.error=E.Deferred.getStackHook()),i.setTimeout(u))}}return E.Deferred((function(i){t[0][3].add(o(0,i,_(s)?s:U,i.notifyWith)),t[1][3].add(o(0,i,_(e)?e:U)),t[2][3].add(o(0,i,_(n)?n:Y))})).promise()},promise:function(e){return null!=e?E.extend(e,s):s}},r={};return E.each(t,(function(e,i){var o=i[2],a=i[5];s[i[1]]=o.add,a&&o.add((function(){n=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(i[3].fire),r[i[0]]=function(){return r[i[0]+"With"](this===r?void 0:this,arguments),this},r[i[0]+"With"]=o.fireWith})),s.promise(r),e&&e.call(r,r),r},when:function(e){var t=arguments.length,n=t,i=Array(n),s=a.call(arguments),r=E.Deferred(),o=function(e){return function(n){i[e]=this,s[e]=arguments.length>1?a.call(arguments):n,--t||r.resolveWith(i,s)}};if(t<=1&&(K(e,r.done(o(n)).resolve,r.reject,!t),"pending"===r.state()||_(s[n]&&s[n].then)))return r.then();for(;n--;)K(s[n],o(n),r.reject);return r.promise()}});var G=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&G.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){i.setTimeout((function(){throw e}))};var J=E.Deferred();function Z(){b.removeEventListener("DOMContentLoaded",Z),i.removeEventListener("load",Z),E.ready()}E.fn.ready=function(e){return J.then(e).catch((function(e){E.readyException(e)})),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||J.resolveWith(b,[E]))}}),E.ready.then=J.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?i.setTimeout(E.ready):(b.addEventListener("DOMContentLoaded",Z),i.addEventListener("load",Z));var ee=function(e,t,n,i,s,r,o){var a=0,l=e.length,c=null==n;if("object"===A(n))for(a in s=!0,n)ee(e,t,a,n[a],!0,r,o);else if(void 0!==i&&(s=!0,_(i)||(o=!0),c&&(o?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(E(e),n)})),t))for(;a<l;a++)t(e[a],n,o?i:i.call(e[a],a,t(e[a],n)));return s?e:c?t.call(e):l?t(e[0],n):r},te=/^-ms-/,ne=/-([a-z])/g;function ie(e,t){return t.toUpperCase()}function se(e){return e.replace(te,"ms-").replace(ne,ie)}var re=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function oe(){this.expando=E.expando+oe.uid++}oe.uid=1,oe.prototype={cache:function(e){var t=e[this.expando];return t||(t={},re(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,s=this.cache(e);if("string"==typeof t)s[se(t)]=n;else for(i in t)s[se(i)]=t[i];return s},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][se(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(se):(t=se(t))in i?[t]:t.match(Q)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||E.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var ae=new oe,le=new oe,ce=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ue=/[A-Z]/g;function he(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(ue,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ce.test(e)?JSON.parse(e):e)}(n)}catch(e){}le.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return le.hasData(e)||ae.hasData(e)},data:function(e,t,n){return le.access(e,t,n)},removeData:function(e,t){le.remove(e,t)},_data:function(e,t,n){return ae.access(e,t,n)},_removeData:function(e,t){ae.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,i,s,r=this[0],o=r&&r.attributes;if(void 0===e){if(this.length&&(s=le.get(r),1===r.nodeType&&!ae.get(r,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(i=o[n].name).indexOf("data-")&&(i=se(i.slice(5)),he(r,i,s[i]));ae.set(r,"hasDataAttrs",!0)}return s}return"object"==typeof e?this.each((function(){le.set(this,e)})):ee(this,(function(t){var n;if(r&&void 0===t)return void 0!==(n=le.get(r,e))||void 0!==(n=he(r,e))?n:void 0;this.each((function(){le.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){le.remove(this,e)}))}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=ae.get(e,t),n&&(!i||Array.isArray(n)?i=ae.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,s=n.shift(),r=E._queueHooks(e,t);"inprogress"===s&&(s=n.shift(),i--),s&&("fx"===t&&n.unshift("inprogress"),delete r.stop,s.call(e,(function(){E.dequeue(e,t)}),r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return ae.get(e,n)||ae.access(e,n,{empty:E.Callbacks("once memory").add((function(){ae.remove(e,[t+"queue",n])}))})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each((function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){E.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,s=E.Deferred(),r=this,o=this.length,a=function(){--i||s.resolveWith(r,[r])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=ae.get(r[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),s.promise(t)}});var de=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,fe=new RegExp("^(?:([+-])=|)("+de+")([a-z%]*)$","i"),pe=["Top","Right","Bottom","Left"],ge=b.documentElement,me=function(e){return E.contains(e.ownerDocument,e)},_e={composed:!0};ge.getRootNode&&(me=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(_e)===e.ownerDocument});var ve=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&me(e)&&"none"===E.css(e,"display")};function be(e,t,n,i){var s,r,o=20,a=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=a(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&fe.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;o--;)E.style(e,t,u+c),(1-r)*(1-(r=a()/l||.5))<=0&&(o=0),u/=r;u*=2,E.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,s=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=s)),s}var ye={};function we(e){var t,n=e.ownerDocument,i=e.nodeName,s=ye[i];return s||(t=n.body.appendChild(n.createElement(i)),s=E.css(t,"display"),t.parentNode.removeChild(t),"none"===s&&(s="block"),ye[i]=s,s)}function Ae(e,t){for(var n,i,s=[],r=0,o=e.length;r<o;r++)(i=e[r]).style&&(n=i.style.display,t?("none"===n&&(s[r]=ae.get(i,"display")||null,s[r]||(i.style.display="")),""===i.style.display&&ve(i)&&(s[r]=we(i))):"none"!==n&&(s[r]="none",ae.set(i,"display",n)));for(r=0;r<o;r++)null!=s[r]&&(e[r].style.display=s[r]);return e}E.fn.extend({show:function(){return Ae(this,!0)},hide:function(){return Ae(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ve(this)?E(this).show():E(this).hide()}))}});var xe,Te,Ee=/^(?:checkbox|radio)$/i,Ce=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ke=/^$|^module$|\/(?:java|ecma)script/i;xe=b.createDocumentFragment().appendChild(b.createElement("div")),(Te=b.createElement("input")).setAttribute("type","radio"),Te.setAttribute("checked","checked"),Te.setAttribute("name","t"),xe.appendChild(Te),m.checkClone=xe.cloneNode(!0).cloneNode(!0).lastChild.checked,xe.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!xe.cloneNode(!0).lastChild.defaultValue,xe.innerHTML="<option></option>",m.option=!!xe.lastChild;var Se={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function Oe(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?E.merge([e],n):n}function De(e,t){for(var n=0,i=e.length;n<i;n++)ae.set(e[n],"globalEval",!t||ae.get(t[n],"globalEval"))}Se.tbody=Se.tfoot=Se.colgroup=Se.caption=Se.thead,Se.th=Se.td,m.option||(Se.optgroup=Se.option=[1,"<select multiple='multiple'>","</select>"]);var Le=/<|&#?\w+;/;function Ne(e,t,n,i,s){for(var r,o,a,l,c,u,h=t.createDocumentFragment(),d=[],f=0,p=e.length;f<p;f++)if((r=e[f])||0===r)if("object"===A(r))E.merge(d,r.nodeType?[r]:r);else if(Le.test(r)){for(o=o||h.appendChild(t.createElement("div")),a=(Ce.exec(r)||["",""])[1].toLowerCase(),l=Se[a]||Se._default,o.innerHTML=l[1]+E.htmlPrefilter(r)+l[2],u=l[0];u--;)o=o.lastChild;E.merge(d,o.childNodes),(o=h.firstChild).textContent=""}else d.push(t.createTextNode(r));for(h.textContent="",f=0;r=d[f++];)if(i&&E.inArray(r,i)>-1)s&&s.push(r);else if(c=me(r),o=Oe(h.appendChild(r),"script"),c&&De(o),n)for(u=0;r=o[u++];)ke.test(r.type||"")&&n.push(r);return h}var je=/^([^.]*)(?:\.(.+)|)/;function $e(){return!0}function Ie(){return!1}function Pe(e,t,n,i,s,r){var o,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Pe(e,a,n,i,t[a],r);return e}if(null==i&&null==s?(s=n,i=n=void 0):null==s&&("string"==typeof n?(s=i,i=void 0):(s=i,i=n,n=void 0)),!1===s)s=Ie;else if(!s)return e;return 1===r&&(o=s,s=function(e){return E().off(e),o.apply(this,arguments)},s.guid=o.guid||(o.guid=E.guid++)),e.each((function(){E.event.add(this,t,s,i,n)}))}function Me(e,t,n){n?(ae.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var n,i=ae.get(this,t);if(1&e.isTrigger&&this[t]){if(i)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=a.call(arguments),ae.set(this,t,i),this[t](),n=ae.get(this,t),ae.set(this,t,!1),i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else i&&(ae.set(this,t,E.event.trigger(i[0],i.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=$e)}})):void 0===ae.get(e,t)&&E.event.add(e,t,$e)}E.event={global:{},add:function(e,t,n,i,s){var r,o,a,l,c,u,h,d,f,p,g,m=ae.get(e);if(re(e))for(n.handler&&(n=(r=n).handler,s=r.selector),s&&E.find.matchesSelector(ge,s),n.guid||(n.guid=E.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(Q)||[""]).length;c--;)f=g=(a=je.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=E.event.special[f]||{},f=(s?h.delegateType:h.bindType)||f,h=E.event.special[f]||{},u=E.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:s,needsContext:s&&E.expr.match.needsContext.test(s),namespace:p.join(".")},r),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,p,o)||e.addEventListener&&e.addEventListener(f,o)),h.add&&(h.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),s?d.splice(d.delegateCount++,0,u):d.push(u),E.event.global[f]=!0)},remove:function(e,t,n,i,s){var r,o,a,l,c,u,h,d,f,p,g,m=ae.hasData(e)&&ae.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(Q)||[""]).length;c--;)if(f=g=(a=je.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=E.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=r=d.length;r--;)u=d[r],!s&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(r,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(e,u));o&&!d.length&&(h.teardown&&!1!==h.teardown.call(e,p,m.handle)||E.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)E.event.remove(e,f+t[c],n,i,!0);E.isEmptyObject(l)&&ae.remove(e,"handle events")}},dispatch:function(e){var t,n,i,s,r,o,a=new Array(arguments.length),l=E.event.fix(e),c=(ae.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(a[0]=l,t=1;t<arguments.length;t++)a[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(o=E.event.handlers.call(this,l,c),t=0;(s=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=s.elem,n=0;(r=s.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==r.namespace&&!l.rnamespace.test(r.namespace)||(l.handleObj=r,l.data=r.data,void 0!==(i=((E.event.special[r.origType]||{}).handle||r.handler).apply(s.elem,a))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,s,r,o,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],o={},n=0;n<l;n++)void 0===o[s=(i=t[n]).selector+" "]&&(o[s]=i.needsContext?E(s,this).index(c)>-1:E.find(s,this,null,[c]).length),o[s]&&r.push(i);r.length&&a.push({elem:c,handlers:r})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:_(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return Ee.test(t.type)&&t.click&&k(t,"input")&&Me(t,"click",!0),!1},trigger:function(e){var t=this||e;return Ee.test(t.type)&&t.click&&k(t,"input")&&Me(t,"click"),!0},_default:function(e){var t=e.target;return Ee.test(t.type)&&t.click&&k(t,"input")&&ae.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?$e:Ie,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Ie,isPropagationStopped:Ie,isImmediatePropagationStopped:Ie,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=$e,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=$e,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=$e,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(e,t){function n(e){if(b.documentMode){var n=ae.get(this,"handle"),i=E.event.fix(e);i.type="focusin"===e.type?"focus":"blur",i.isSimulated=!0,n(e),i.target===i.currentTarget&&n(i)}else E.event.simulate(t,e.target,E.event.fix(e))}E.event.special[e]={setup:function(){var i;if(Me(this,e,!0),!b.documentMode)return!1;(i=ae.get(this,t))||this.addEventListener(t,n),ae.set(this,t,(i||0)+1)},trigger:function(){return Me(this,e),!0},teardown:function(){var e;if(!b.documentMode)return!1;(e=ae.get(this,t)-1)?ae.set(this,t,e):(this.removeEventListener(t,n),ae.remove(this,t))},_default:function(t){return ae.get(t.target,e)},delegateType:t},E.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,s=b.documentMode?this:i,r=ae.get(s,t);r||(b.documentMode?this.addEventListener(t,n):i.addEventListener(e,n,!0)),ae.set(s,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,s=b.documentMode?this:i,r=ae.get(s,t)-1;r?ae.set(s,t,r):(b.documentMode?this.removeEventListener(t,n):i.removeEventListener(e,n,!0),ae.remove(s,t))}}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,s=e.handleObj;return i&&(i===this||E.contains(this,i))||(e.type=s.origType,n=s.handler.apply(this,arguments),e.type=t),n}}})),E.fn.extend({on:function(e,t,n,i){return Pe(this,e,t,n,i)},one:function(e,t,n,i){return Pe(this,e,t,n,i,1)},off:function(e,t,n){var i,s;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(s in e)this.off(s,t,e[s]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ie),this.each((function(){E.event.remove(this,e,n,t)}))}});var He=/<script|<style|<link/i,qe=/checked\s*(?:[^=]|=\s*.checked.)/i,Fe=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Re(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function We(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Be(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function ze(e,t){var n,i,s,r,o,a;if(1===t.nodeType){if(ae.hasData(e)&&(a=ae.get(e).events))for(s in ae.remove(t,"handle events"),a)for(n=0,i=a[s].length;n<i;n++)E.event.add(t,s,a[s][n]);le.hasData(e)&&(r=le.access(e),o=E.extend({},r),le.set(t,o))}}function Ve(e,t){var n=t.nodeName.toLowerCase();"input"===n&&Ee.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Xe(e,t,n,i){t=l(t);var s,r,o,a,c,u,h=0,d=e.length,f=d-1,p=t[0],g=_(p);if(g||d>1&&"string"==typeof p&&!m.checkClone&&qe.test(p))return e.each((function(s){var r=e.eq(s);g&&(t[0]=p.call(this,s,r.html())),Xe(r,t,n,i)}));if(d&&(r=(s=Ne(t,e[0].ownerDocument,!1,e,i)).firstChild,1===s.childNodes.length&&(s=r),r||i)){for(a=(o=E.map(Oe(s,"script"),We)).length;h<d;h++)c=s,h!==f&&(c=E.clone(c,!0,!0),a&&E.merge(o,Oe(c,"script"))),n.call(e[h],c,h);if(a)for(u=o[o.length-1].ownerDocument,E.map(o,Be),h=0;h<a;h++)c=o[h],ke.test(c.type||"")&&!ae.access(c,"globalEval")&&E.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?E._evalUrl&&!c.noModule&&E._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Fe,""),c,u))}return e}function Qe(e,t,n){for(var i,s=t?E.filter(t,e):e,r=0;null!=(i=s[r]);r++)n||1!==i.nodeType||E.cleanData(Oe(i)),i.parentNode&&(n&&me(i)&&De(Oe(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,s,r,o,a=e.cloneNode(!0),l=me(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(o=Oe(a),i=0,s=(r=Oe(e)).length;i<s;i++)Ve(r[i],o[i]);if(t)if(n)for(r=r||Oe(e),o=o||Oe(a),i=0,s=r.length;i<s;i++)ze(r[i],o[i]);else ze(e,a);return(o=Oe(a,"script")).length>0&&De(o,!l&&Oe(e,"script")),a},cleanData:function(e){for(var t,n,i,s=E.event.special,r=0;void 0!==(n=e[r]);r++)if(re(n)){if(t=n[ae.expando]){if(t.events)for(i in t.events)s[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[ae.expando]=void 0}n[le.expando]&&(n[le.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Qe(this,e,!0)},remove:function(e){return Qe(this,e)},text:function(e){return ee(this,(function(e){return void 0===e?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Xe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Re(this,e).appendChild(e)}))},prepend:function(){return Xe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Re(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Xe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(Oe(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return E.clone(this,e,t)}))},html:function(e){return ee(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!He.test(e)&&!Se[(Ce.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(Oe(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Xe(this,arguments,(function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(Oe(this)),n&&n.replaceChild(t,this))}),e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){E.fn[e]=function(e){for(var n,i=[],s=E(e),r=s.length-1,o=0;o<=r;o++)n=o===r?this:this.clone(!0),E(s[o])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var Ue=new RegExp("^("+de+")(?!px)[a-z%]+$","i"),Ye=/^--/,Ke=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},Ge=function(e,t,n){var i,s,r={};for(s in t)r[s]=e.style[s],e.style[s]=t[s];for(s in i=n.call(e),t)e.style[s]=r[s];return i},Je=new RegExp(pe.join("|"),"i");function Ze(e,t,n){var i,s,r,o,a=Ye.test(t),l=e.style;return(n=n||Ke(e))&&(o=n.getPropertyValue(t)||n[t],a&&o&&(o=o.replace(N,"$1")||void 0),""!==o||me(e)||(o=E.style(e,t)),!m.pixelBoxStyles()&&Ue.test(o)&&Je.test(t)&&(i=l.width,s=l.minWidth,r=l.maxWidth,l.minWidth=l.maxWidth=l.width=o,o=n.width,l.width=i,l.minWidth=s,l.maxWidth=r)),void 0!==o?o+"":o}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ge.appendChild(c).appendChild(u);var e=i.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",o=36===t(e.right),s=36===t(e.width),u.style.position="absolute",r=12===t(u.offsetWidth/3),ge.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,s,r,o,a,l,c=b.createElement("div"),u=b.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===u.style.backgroundClip,E.extend(m,{boxSizingReliable:function(){return e(),s},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),r},reliableTrDimensions:function(){var e,t,n,s;return null==a&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ge.appendChild(e).appendChild(t).appendChild(n),s=i.getComputedStyle(t),a=parseInt(s.height,10)+parseInt(s.borderTopWidth,10)+parseInt(s.borderBottomWidth,10)===t.offsetHeight,ge.removeChild(e)),a}}))}();var tt=["Webkit","Moz","ms"],nt=b.createElement("div").style,it={};function st(e){var t=E.cssProps[e]||it[e];return t||(e in nt?e:it[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var rt=/^(none|table(?!-c[ea]).+)/,ot={position:"absolute",visibility:"hidden",display:"block"},at={letterSpacing:"0",fontWeight:"400"};function lt(e,t,n){var i=fe.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function ct(e,t,n,i,s,r){var o="width"===t?1:0,a=0,l=0,c=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(c+=E.css(e,n+pe[o],!0,s)),i?("content"===n&&(l-=E.css(e,"padding"+pe[o],!0,s)),"margin"!==n&&(l-=E.css(e,"border"+pe[o]+"Width",!0,s))):(l+=E.css(e,"padding"+pe[o],!0,s),"padding"!==n?l+=E.css(e,"border"+pe[o]+"Width",!0,s):a+=E.css(e,"border"+pe[o]+"Width",!0,s));return!i&&r>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-a-.5))||0),l+c}function ut(e,t,n){var i=Ke(e),s=(!m.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,i),r=s,o=Ze(e,t,i),a="offset"+t[0].toUpperCase()+t.slice(1);if(Ue.test(o)){if(!n)return o;o="auto"}return(!m.boxSizingReliable()&&s||!m.reliableTrDimensions()&&k(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===E.css(e,"display",!1,i))&&e.getClientRects().length&&(s="border-box"===E.css(e,"boxSizing",!1,i),(r=a in e)&&(o=e[a])),(o=parseFloat(o)||0)+ct(e,t,n||(s?"border":"content"),r,i,o)+"px"}function ht(e,t,n,i,s){return new ht.prototype.init(e,t,n,i,s)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var s,r,o,a=se(t),l=Ye.test(t),c=e.style;if(l||(t=st(a)),o=E.cssHooks[t]||E.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(s=o.get(e,!1,i))?s:c[t];"string"===(r=typeof n)&&(s=fe.exec(n))&&s[1]&&(n=be(e,t,s),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=s&&s[3]||(E.cssNumber[a]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var s,r,o,a=se(t);return Ye.test(t)||(t=st(a)),(o=E.cssHooks[t]||E.cssHooks[a])&&"get"in o&&(s=o.get(e,!0,n)),void 0===s&&(s=Ze(e,t,i)),"normal"===s&&t in at&&(s=at[t]),""===n||n?(r=parseFloat(s),!0===n||isFinite(r)?r||0:s):s}}),E.each(["height","width"],(function(e,t){E.cssHooks[t]={get:function(e,n,i){if(n)return!rt.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ut(e,t,i):Ge(e,ot,(function(){return ut(e,t,i)}))},set:function(e,n,i){var s,r=Ke(e),o=!m.scrollboxSize()&&"absolute"===r.position,a=(o||i)&&"border-box"===E.css(e,"boxSizing",!1,r),l=i?ct(e,t,i,a,r):0;return a&&o&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-ct(e,t,"border",!1,r)-.5)),l&&(s=fe.exec(n))&&"px"!==(s[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),lt(0,n,l)}}})),E.cssHooks.marginLeft=et(m.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ze(e,"marginLeft"))||e.getBoundingClientRect().left-Ge(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(e,t){E.cssHooks[e+t]={expand:function(n){for(var i=0,s={},r="string"==typeof n?n.split(" "):[n];i<4;i++)s[e+pe[i]+t]=r[i]||r[i-2]||r[0];return s}},"margin"!==e&&(E.cssHooks[e+t].set=lt)})),E.fn.extend({css:function(e,t){return ee(this,(function(e,t,n){var i,s,r={},o=0;if(Array.isArray(t)){for(i=Ke(e),s=t.length;o<s;o++)r[t[o]]=E.css(e,t[o],!1,i);return r}return void 0!==n?E.style(e,t,n):E.css(e,t)}),e,t,arguments.length>1)}}),E.Tween=ht,ht.prototype={constructor:ht,init:function(e,t,n,i,s,r){this.elem=e,this.prop=n,this.easing=s||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(E.cssNumber[n]?"":"px")},cur:function(){var e=ht.propHooks[this.prop];return e&&e.get?e.get(this):ht.propHooks._default.get(this)},run:function(e){var t,n=ht.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ht.propHooks._default.set(this),this}},ht.prototype.init.prototype=ht.prototype,ht.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[st(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},ht.propHooks.scrollTop=ht.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=ht.prototype.init,E.fx.step={};var dt,ft,pt=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function mt(){ft&&(!1===b.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(mt):i.setTimeout(mt,E.fx.interval),E.fx.tick())}function _t(){return i.setTimeout((function(){dt=void 0})),dt=Date.now()}function vt(e,t){var n,i=0,s={height:e};for(t=t?1:0;i<4;i+=2-t)s["margin"+(n=pe[i])]=s["padding"+n]=e;return t&&(s.opacity=s.width=e),s}function bt(e,t,n){for(var i,s=(yt.tweeners[t]||[]).concat(yt.tweeners["*"]),r=0,o=s.length;r<o;r++)if(i=s[r].call(n,t,e))return i}function yt(e,t,n){var i,s,r=0,o=yt.prefilters.length,a=E.Deferred().always((function(){delete l.elem})),l=function(){if(s)return!1;for(var t=dt||_t(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),r=0,o=c.tweens.length;r<o;r++)c.tweens[r].run(i);return a.notifyWith(e,[c,i,n]),i<1&&o?n:(o||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:dt||_t(),duration:n.duration,tweens:[],createTween:function(t,n){var i=E.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(s)return this;for(s=!0;n<i;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,i,s,r,o;for(n in e)if(s=t[i=se(n)],r=e[n],Array.isArray(r)&&(s=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(o=E.cssHooks[i])&&"expand"in o)for(n in r=o.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=s);else t[i]=s}(u,c.opts.specialEasing);r<o;r++)if(i=yt.prefilters[r].call(c,e,u,c.opts))return _(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(u,bt,c),_(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(yt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return be(n.elem,e,fe.exec(t),n),n}]},tweener:function(e,t){_(e)?(t=e,e=["*"]):e=e.match(Q);for(var n,i=0,s=e.length;i<s;i++)n=e[i],yt.tweeners[n]=yt.tweeners[n]||[],yt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,s,r,o,a,l,c,u,h="width"in t||"height"in t,d=this,f={},p=e.style,g=e.nodeType&&ve(e),m=ae.get(e,"fxshow");for(i in n.queue||(null==(o=E._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always((function(){d.always((function(){o.unqueued--,E.queue(e,"fx").length||o.empty.fire()}))}))),t)if(s=t[i],pt.test(s)){if(delete t[i],r=r||"toggle"===s,s===(g?"hide":"show")){if("show"!==s||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(f))for(i in h&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=ae.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(Ae([e],!0),c=e.style.display||c,u=E.css(e,"display"),Ae([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(d.done((function(){p.display=c})),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=ae.access(e,"fxshow",{display:c}),r&&(m.hidden=!g),g&&Ae([e],!0),d.done((function(){for(i in g||Ae([e]),ae.remove(e,"fxshow"),f)E.style(e,i,f[i])}))),l=bt(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?yt.prefilters.unshift(e):yt.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||_(e)&&e,duration:e,easing:n&&t||t&&!_(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){_(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ve).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var s=E.isEmptyObject(e),r=E.speed(t,n,i),o=function(){var t=yt(this,E.extend({},e),r);(s||ae.get(this,"finish"))&&t.stop(!0)};return o.finish=o,s||!1===r.queue?this.each(o):this.queue(r.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,s=null!=e&&e+"queueHooks",r=E.timers,o=ae.get(this);if(s)o[s]&&o[s].stop&&i(o[s]);else for(s in o)o[s]&&o[s].stop&&gt.test(s)&&i(o[s]);for(s=r.length;s--;)r[s].elem!==this||null!=e&&r[s].queue!==e||(r[s].anim.stop(n),t=!1,r.splice(s,1));!t&&n||E.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=ae.get(this),i=n[e+"queue"],s=n[e+"queueHooks"],r=E.timers,o=i?i.length:0;for(n.finish=!0,E.queue(this,e,[]),s&&s.stop&&s.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===e&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(e,t){var n=E.fn[t];E.fn[t]=function(e,i,s){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(vt(t,!0),e,i,s)}})),E.each({slideDown:vt("show"),slideUp:vt("hide"),slideToggle:vt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){E.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(dt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),dt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ft||(ft=!0,mt())},E.fx.stop=function(){ft=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var s=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(s)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",m.checkOn=""!==e.value,m.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",m.radioValue="t"===e.value}();var wt,At=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return ee(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){E.removeAttr(this,e)}))}}),E.extend({attr:function(e,t,n){var i,s,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?E.prop(e,t,n):(1===r&&E.isXMLDoc(e)||(s=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):s&&"set"in s&&void 0!==(i=s.set(e,n,t))?i:(e.setAttribute(t,n+""),n):s&&"get"in s&&null!==(i=s.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,s=t&&t.match(Q);if(s&&1===e.nodeType)for(;n=s[i++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=At[t]||E.find.attr;At[t]=function(e,t,i){var s,r,o=t.toLowerCase();return i||(r=At[o],At[o]=s,s=null!=n(e,t,i)?o:null,At[o]=r),s}}));var xt=/^(?:input|select|textarea|button)$/i,Tt=/^(?:a|area)$/i;function Et(e){return(e.match(Q)||[]).join(" ")}function Ct(e){return e.getAttribute&&e.getAttribute("class")||""}function kt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Q)||[]}E.fn.extend({prop:function(e,t){return ee(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[E.propFix[e]||e]}))}}),E.extend({prop:function(e,t,n){var i,s,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&E.isXMLDoc(e)||(t=E.propFix[t]||t,s=E.propHooks[t]),void 0!==n?s&&"set"in s&&void 0!==(i=s.set(e,n,t))?i:e[t]=n:s&&"get"in s&&null!==(i=s.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):xt.test(e.nodeName)||Tt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(e){var t,n,i,s,r,o;return _(e)?this.each((function(t){E(this).addClass(e.call(this,t,Ct(this)))})):(t=kt(e)).length?this.each((function(){if(i=Ct(this),n=1===this.nodeType&&" "+Et(i)+" "){for(r=0;r<t.length;r++)s=t[r],n.indexOf(" "+s+" ")<0&&(n+=s+" ");o=Et(n),i!==o&&this.setAttribute("class",o)}})):this},removeClass:function(e){var t,n,i,s,r,o;return _(e)?this.each((function(t){E(this).removeClass(e.call(this,t,Ct(this)))})):arguments.length?(t=kt(e)).length?this.each((function(){if(i=Ct(this),n=1===this.nodeType&&" "+Et(i)+" "){for(r=0;r<t.length;r++)for(s=t[r];n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");o=Et(n),i!==o&&this.setAttribute("class",o)}})):this:this.attr("class","")},toggleClass:function(e,t){var n,i,s,r,o=typeof e,a="string"===o||Array.isArray(e);return _(e)?this.each((function(n){E(this).toggleClass(e.call(this,n,Ct(this),t),t)})):"boolean"==typeof t&&a?t?this.addClass(e):this.removeClass(e):(n=kt(e),this.each((function(){if(a)for(r=E(this),s=0;s<n.length;s++)i=n[s],r.hasClass(i)?r.removeClass(i):r.addClass(i);else void 0!==e&&"boolean"!==o||((i=Ct(this))&&ae.set(this,"__className__",i),this.setAttribute&&this.setAttribute("class",i||!1===e?"":ae.get(this,"__className__")||""))})))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+Et(Ct(n))+" ").indexOf(t)>-1)return!0;return!1}});var St=/\r/g;E.fn.extend({val:function(e){var t,n,i,s=this[0];return arguments.length?(i=_(e),this.each((function(n){var s;1===this.nodeType&&(null==(s=i?e.call(this,n,E(this).val()):e)?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=E.map(s,(function(e){return null==e?"":e+""}))),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,s,"value")||(this.value=s))}))):s?(t=E.valHooks[s.type]||E.valHooks[s.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(s,"value"))?n:"string"==typeof(n=s.value)?n.replace(St,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:Et(E.text(e))}},select:{get:function(e){var t,n,i,s=e.options,r=e.selectedIndex,o="select-one"===e.type,a=o?null:[],l=o?r+1:s.length;for(i=r<0?l:o?r:0;i<l;i++)if(((n=s[i]).selected||i===r)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=E(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,i,s=e.options,r=E.makeArray(t),o=s.length;o--;)((i=s[o]).selected=E.inArray(E.valHooks.option.get(i),r)>-1)&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},m.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}));var Ot=i.location,Dt={guid:Date.now()},Lt=/\?/;E.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||E.error("Invalid XML: "+(n?E.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Nt=/^(?:focusinfocus|focusoutblur)$/,jt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,s){var r,o,a,l,c,u,h,d,p=[n||b],g=f.call(e,"type")?e.type:e,m=f.call(e,"namespace")?e.namespace.split("."):[];if(o=d=a=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!Nt.test(g+E.event.triggered)&&(g.indexOf(".")>-1&&(m=g.split("."),g=m.shift(),m.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[E.expando]?e:new E.Event(g,"object"==typeof e&&e)).isTrigger=s?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),h=E.event.special[g]||{},s||!h.trigger||!1!==h.trigger.apply(n,t))){if(!s&&!h.noBubble&&!v(n)){for(l=h.delegateType||g,Nt.test(l+g)||(o=o.parentNode);o;o=o.parentNode)p.push(o),a=o;a===(n.ownerDocument||b)&&p.push(a.defaultView||a.parentWindow||i)}for(r=0;(o=p[r++])&&!e.isPropagationStopped();)d=o,e.type=r>1?l:h.bindType||g,(u=(ae.get(o,"events")||Object.create(null))[e.type]&&ae.get(o,"handle"))&&u.apply(o,t),(u=c&&o[c])&&u.apply&&re(o)&&(e.result=u.apply(o,t),!1===e.result&&e.preventDefault());return e.type=g,s||e.isDefaultPrevented()||h._default&&!1!==h._default.apply(p.pop(),t)||!re(n)||c&&_(n[g])&&!v(n)&&((a=n[c])&&(n[c]=null),E.event.triggered=g,e.isPropagationStopped()&&d.addEventListener(g,jt),n[g](),e.isPropagationStopped()&&d.removeEventListener(g,jt),E.event.triggered=void 0,a&&(n[c]=a)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each((function(){E.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}});var $t=/\[\]$/,It=/\r?\n/g,Pt=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;function Ht(e,t,n,i){var s;if(Array.isArray(t))E.each(t,(function(t,s){n||$t.test(e)?i(e,s):Ht(e+"["+("object"==typeof s&&null!=s?t:"")+"]",s,n,i)}));else if(n||"object"!==A(t))i(e,t);else for(s in t)Ht(e+"["+s+"]",t[s],n,i)}E.param=function(e,t){var n,i=[],s=function(e,t){var n=_(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,(function(){s(this.name,this.value)}));else for(n in e)Ht(n,e[n],t,s);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&Mt.test(this.nodeName)&&!Pt.test(e)&&(this.checked||!Ee.test(e))})).map((function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(e){return{name:t.name,value:e.replace(It,"\r\n")}})):{name:t.name,value:n.replace(It,"\r\n")}})).get()}});var qt=/%20/g,Ft=/#.*$/,Rt=/([?&])_=[^&]*/,Wt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Bt=/^(?:GET|HEAD)$/,zt=/^\/\//,Vt={},Xt={},Qt="*/".concat("*"),Ut=b.createElement("a");function Yt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,s=0,r=t.toLowerCase().match(Q)||[];if(_(n))for(;i=r[s++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Kt(e,t,n,i){var s={},r=e===Xt;function o(a){var l;return s[a]=!0,E.each(e[a]||[],(function(e,a){var c=a(t,n,i);return"string"!=typeof c||r||s[c]?r?!(l=c):void 0:(t.dataTypes.unshift(c),o(c),!1)})),l}return o(t.dataTypes[0])||!s["*"]&&o("*")}function Gt(e,t){var n,i,s=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((s[n]?e:i||(i={}))[n]=t[n]);return i&&E.extend(!0,e,i),e}Ut.href=Ot.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ot.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ot.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Gt(Gt(e,E.ajaxSettings),t):Gt(E.ajaxSettings,e)},ajaxPrefilter:Yt(Vt),ajaxTransport:Yt(Xt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,s,r,o,a,l,c,u,h,d,f=E.ajaxSetup({},t),p=f.context||f,g=f.context&&(p.nodeType||p.jquery)?E(p):E.event,m=E.Deferred(),_=E.Callbacks("once memory"),v=f.statusCode||{},y={},w={},A="canceled",x={readyState:0,getResponseHeader:function(e){var t;if(c){if(!o)for(o={};t=Wt.exec(r);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,y[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)x.always(e[x.status]);else for(t in e)v[t]=[v[t],e[t]];return this},abort:function(e){var t=e||A;return n&&n.abort(t),T(0,t),this}};if(m.promise(x),f.url=((e||f.url||Ot.href)+"").replace(zt,Ot.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Q)||[""],null==f.crossDomain){l=b.createElement("a");try{l.href=f.url,l.href=l.href,f.crossDomain=Ut.protocol+"//"+Ut.host!=l.protocol+"//"+l.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=E.param(f.data,f.traditional)),Kt(Vt,f,t,x),c)return x;for(h in(u=E.event&&f.global)&&0==E.active++&&E.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Bt.test(f.type),s=f.url.replace(Ft,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(qt,"+")):(d=f.url.slice(s.length),f.data&&(f.processData||"string"==typeof f.data)&&(s+=(Lt.test(s)?"&":"?")+f.data,delete f.data),!1===f.cache&&(s=s.replace(Rt,"$1"),d=(Lt.test(s)?"&":"?")+"_="+Dt.guid+++d),f.url=s+d),f.ifModified&&(E.lastModified[s]&&x.setRequestHeader("If-Modified-Since",E.lastModified[s]),E.etag[s]&&x.setRequestHeader("If-None-Match",E.etag[s])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&x.setRequestHeader("Content-Type",f.contentType),x.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Qt+"; q=0.01":""):f.accepts["*"]),f.headers)x.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(!1===f.beforeSend.call(p,x,f)||c))return x.abort();if(A="abort",_.add(f.complete),x.done(f.success),x.fail(f.error),n=Kt(Xt,f,t,x)){if(x.readyState=1,u&&g.trigger("ajaxSend",[x,f]),c)return x;f.async&&f.timeout>0&&(a=i.setTimeout((function(){x.abort("timeout")}),f.timeout));try{c=!1,n.send(y,T)}catch(e){if(c)throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,o,l){var h,d,b,y,w,A=t;c||(c=!0,a&&i.clearTimeout(a),n=void 0,r=l||"",x.readyState=e>0?4:0,h=e>=200&&e<300||304===e,o&&(y=function(e,t,n){for(var i,s,r,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(s in a)if(a[s]&&a[s].test(i)){l.unshift(s);break}if(l[0]in n)r=l[0];else{for(s in n){if(!l[0]||e.converters[s+" "+l[0]]){r=s;break}o||(o=s)}r=r||o}if(r)return r!==l[0]&&l.unshift(r),n[r]}(f,x,o)),!h&&E.inArray("script",f.dataTypes)>-1&&E.inArray("json",f.dataTypes)<0&&(f.converters["text script"]=function(){}),y=function(e,t,n,i){var s,r,o,a,l,c={},u=e.dataTypes.slice();if(u[1])for(o in e.converters)c[o.toLowerCase()]=e.converters[o];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(o=c[l+" "+r]||c["* "+r]))for(s in c)if((a=s.split(" "))[1]===r&&(o=c[l+" "+a[0]]||c["* "+a[0]])){!0===o?o=c[s]:!0!==c[s]&&(r=a[0],u.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(f,y,x,h),h?(f.ifModified&&((w=x.getResponseHeader("Last-Modified"))&&(E.lastModified[s]=w),(w=x.getResponseHeader("etag"))&&(E.etag[s]=w)),204===e||"HEAD"===f.type?A="nocontent":304===e?A="notmodified":(A=y.state,d=y.data,h=!(b=y.error))):(b=A,!e&&A||(A="error",e<0&&(e=0))),x.status=e,x.statusText=(t||A)+"",h?m.resolveWith(p,[d,A,x]):m.rejectWith(p,[x,A,b]),x.statusCode(v),v=void 0,u&&g.trigger(h?"ajaxSuccess":"ajaxError",[x,f,h?d:b]),_.fireWith(p,[x,A]),u&&(g.trigger("ajaxComplete",[x,f]),--E.active||E.event.trigger("ajaxStop")))}return x},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],(function(e,t){E[t]=function(e,n,i,s){return _(n)&&(s=s||i,i=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:s,data:n,success:i},E.isPlainObject(e)&&e))}})),E.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(_(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return _(e)?this.each((function(t){E(this).wrapInner(e.call(this,t))})):this.each((function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=_(e);return this.each((function(n){E(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var Jt={0:200,1223:204},Zt=E.ajaxSettings.xhr();m.cors=!!Zt&&"withCredentials"in Zt,m.ajax=Zt=!!Zt,E.ajaxTransport((function(e){var t,n;if(m.cors||Zt&&!e.crossDomain)return{send:function(s,r){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];for(o in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest"),s)a.setRequestHeader(o,s[o]);t=function(e){return function(){t&&(t=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(Jt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),n=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),E.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),E.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,s){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&s("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var en,tn=[],nn=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=tn.pop()||E.expando+"_"+Dt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",(function(e,t,n){var s,r,o,a=!1!==e.jsonp&&(nn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return s=e.jsonpCallback=_(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(nn,"$1"+s):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?"&":"?")+e.jsonp+"="+s),e.converters["script json"]=function(){return o||E.error(s+" was not called"),o[0]},e.dataTypes[0]="json",r=i[s],i[s]=function(){o=arguments},n.always((function(){void 0===r?E(i).removeProp(s):i[s]=r,e[s]&&(e.jsonpCallback=t.jsonpCallback,tn.push(s)),o&&_(r)&&r(o[0]),o=r=void 0})),"script"})),m.createHTMLDocument=((en=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===en.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(i)):t=b),r=!n&&[],(s=F.exec(e))?[t.createElement(s[1])]:(s=Ne([e],t,r),r&&r.length&&E(r).remove(),E.merge([],s.childNodes)));var i,s,r},E.fn.load=function(e,t,n){var i,s,r,o=this,a=e.indexOf(" ");return a>-1&&(i=Et(e.slice(a)),e=e.slice(0,a)),_(t)?(n=t,t=void 0):t&&"object"==typeof t&&(s="POST"),o.length>0&&E.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done((function(e){r=arguments,o.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)})).always(n&&function(e,t){o.each((function(){n.apply(this,r||[e.responseText,t,e])}))}),this},E.expr.pseudos.animated=function(e){return E.grep(E.timers,(function(t){return e===t.elem})).length},E.offset={setOffset:function(e,t,n){var i,s,r,o,a,l,c=E.css(e,"position"),u=E(e),h={};"static"===c&&(e.style.position="relative"),a=u.offset(),r=E.css(e,"top"),l=E.css(e,"left"),("absolute"===c||"fixed"===c)&&(r+l).indexOf("auto")>-1?(o=(i=u.position()).top,s=i.left):(o=parseFloat(r)||0,s=parseFloat(l)||0),_(t)&&(t=t.call(e,n,E.extend({},a))),null!=t.top&&(h.top=t.top-a.top+o),null!=t.left&&(h.left=t.left-a.left+s),"using"in t?t.using.call(e,h):u.css(h)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){E.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],s={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((s=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),s.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-s.top-E.css(i,"marginTop",!0),left:t.left-s.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ge}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;E.fn[e]=function(i){return ee(this,(function(e,i,s){var r;if(v(e)?r=e:9===e.nodeType&&(r=e.defaultView),void 0===s)return r?r[t]:e[i];r?r.scrollTo(n?r.pageXOffset:s,n?s:r.pageYOffset):e[i]=s}),e,i,arguments.length)}})),E.each(["top","left"],(function(e,t){E.cssHooks[t]=et(m.pixelPosition,(function(e,n){if(n)return n=Ze(e,t),Ue.test(n)?E(e).position()[t]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){E.fn[i]=function(s,r){var o=arguments.length&&(n||"boolean"!=typeof s),a=n||(!0===s||!0===r?"margin":"border");return ee(this,(function(t,n,s){var r;return v(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+e],r["scroll"+e],t.body["offset"+e],r["offset"+e],r["client"+e])):void 0===s?E.css(t,n,a):E.style(t,n,s,a)}),t,o?s:void 0,o)}}))})),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){E.fn[t]=function(e){return this.on(t,e)}})),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var sn=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,i,s;if("string"==typeof t&&(n=e[t],t=e,e=n),_(e))return i=a.call(arguments,2),s=function(){return e.apply(t||this,i.concat(a.call(arguments)))},s.guid=e.guid=e.guid||E.guid++,s},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=k,E.isFunction=_,E.isWindow=v,E.camelCase=se,E.type=A,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(sn,"$1")},void 0===(n=function(){return E}.apply(t,[]))||(e.exports=n);var rn=i.jQuery,on=i.$;return E.noConflict=function(e){return i.$===E&&(i.$=on),e&&i.jQuery===E&&(i.jQuery=rn),E},void 0===s&&(i.jQuery=i.$=E),E}))}},t={};function n(i){var s=t[i];if(void 0!==s)return s.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(692),t=n.n(e),i=n(11),s=n(576);const r=new Map,o={set(e,t,n){r.has(e)||r.set(e,new Map);const i=r.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>r.has(e)&&r.get(e).get(t)||null,remove(e,t){if(!r.has(e))return;const n=r.get(e);n.delete(t),0===n.size&&r.delete(e)}},a="transitionend",l=e=>(e&&window.CSS&&window.CSS.escape&&(e=e.replace(/#([^\s"#']+)/g,((e,t)=>`#${CSS.escape(t)}`))),e),c=e=>{e.dispatchEvent(new Event(a))},u=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),h=e=>u(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(l(e)):null,d=e=>{if(!u(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),n=e.closest("details:not([open])");if(!n)return t;if(n!==e){const t=e.closest("summary");if(t&&t.parentNode!==n)return!1;if(null===t)return!1}return t},f=e=>!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))),p=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?p(e.parentNode):null},g=()=>{},m=e=>{e.offsetHeight},_=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,v=[],b=()=>"rtl"===document.documentElement.dir,y=e=>{var t;t=()=>{const t=_();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(v.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of v)e()})),v.push(t)):t()},w=(e,t=[],n=e)=>"function"==typeof e?e(...t):n,A=(e,t,n=!0)=>{if(!n)return void w(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),s=Number.parseFloat(n);return i||s?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let s=!1;const r=({target:n})=>{n===t&&(s=!0,t.removeEventListener(a,r),w(e))};t.addEventListener(a,r),setTimeout((()=>{s||c(t)}),i)},x=(e,t,n,i)=>{const s=e.length;let r=e.indexOf(t);return-1===r?!n&&i?e[s-1]:e[0]:(r+=n?1:-1,i&&(r=(r+s)%s),e[Math.max(0,Math.min(r,s-1))])},T=/[^.]*(?=\..*)\.|.*/,E=/\..*/,C=/::\d+$/,k={};let S=1;const O={mouseenter:"mouseover",mouseleave:"mouseout"},D=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function L(e,t){return t&&`${t}::${S++}`||e.uidEvent||S++}function N(e){const t=L(e);return e.uidEvent=t,k[t]=k[t]||{},k[t]}function j(e,t,n=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===n))}function $(e,t,n){const i="string"==typeof t,s=i?n:t||n;let r=H(e);return D.has(r)||(r=e),[i,s,r]}function I(e,t,n,i,s){if("string"!=typeof t||!e)return;let[r,o,a]=$(t,n,i);if(t in O){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};o=e(o)}const l=N(e),c=l[a]||(l[a]={}),u=j(c,o,r?n:null);if(u)return void(u.oneOff=u.oneOff&&s);const h=L(o,t.replace(T,"")),d=r?function(e,t,n){return function i(s){const r=e.querySelectorAll(t);for(let{target:o}=s;o&&o!==this;o=o.parentNode)for(const a of r)if(a===o)return F(s,{delegateTarget:o}),i.oneOff&&q.off(e,s.type,t,n),n.apply(o,[s])}}(e,n,o):function(e,t){return function n(i){return F(i,{delegateTarget:e}),n.oneOff&&q.off(e,i.type,t),t.apply(e,[i])}}(e,o);d.delegationSelector=r?n:null,d.callable=o,d.oneOff=s,d.uidEvent=h,c[h]=d,e.addEventListener(a,d,r)}function P(e,t,n,i,s){const r=j(t[n],i,s);r&&(e.removeEventListener(n,r,Boolean(s)),delete t[n][r.uidEvent])}function M(e,t,n,i){const s=t[n]||{};for(const[r,o]of Object.entries(s))r.includes(i)&&P(e,t,n,o.callable,o.delegationSelector)}function H(e){return e=e.replace(E,""),O[e]||e}const q={on(e,t,n,i){I(e,t,n,i,!1)},one(e,t,n,i){I(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[s,r,o]=$(t,n,i),a=o!==t,l=N(e),c=l[o]||{},u=t.startsWith(".");if(void 0===r){if(u)for(const n of Object.keys(l))M(e,l,n,t.slice(1));for(const[n,i]of Object.entries(c)){const s=n.replace(C,"");a&&!t.includes(s)||P(e,l,o,i.callable,i.delegationSelector)}}else{if(!Object.keys(c).length)return;P(e,l,o,r,s?n:null)}},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=_();let s=null,r=!0,o=!0,a=!1;t!==H(t)&&i&&(s=i.Event(t,n),i(e).trigger(s),r=!s.isPropagationStopped(),o=!s.isImmediatePropagationStopped(),a=s.isDefaultPrevented());const l=F(new Event(t,{bubbles:r,cancelable:!0}),n);return a&&l.preventDefault(),o&&e.dispatchEvent(l),l.defaultPrevented&&s&&s.preventDefault(),l}};function F(e,t={}){for(const[n,i]of Object.entries(t))try{e[n]=i}catch(t){Object.defineProperty(e,n,{configurable:!0,get:()=>i})}return e}function R(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function W(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const B={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${W(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${W(t)}`)},getDataAttributes(e){if(!e)return{};const t={},n=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const i of n){let n=i.replace(/^bs/,"");n=n.charAt(0).toLowerCase()+n.slice(1,n.length),t[n]=R(e.dataset[i])}return t},getDataAttribute:(e,t)=>R(e.getAttribute(`data-bs-${W(t)}`))};class z{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const n=u(t)?B.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof n?n:{},...u(t)?B.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const[i,s]of Object.entries(t)){const t=e[i],r=u(t)?"element":null==(n=t)?`${n}`:Object.prototype.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${i}" provided type "${r}" but expected type "${s}".`)}var n}}class V extends z{constructor(e,t){super(),(e=h(e))&&(this._element=e,this._config=this._getConfig(t),o.set(this._element,this.constructor.DATA_KEY,this))}dispose(){o.remove(this._element,this.constructor.DATA_KEY),q.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,n=!0){A(e,t,n)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return o.get(h(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.3.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const X=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return t?t.split(",").map((e=>l(e))).join(","):null},Q={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode.closest(t);for(;i;)n.push(i),i=i.parentNode.closest(t);return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!f(e)&&d(e)))},getSelectorFromElement(e){const t=X(e);return t&&Q.findOne(t)?t:null},getElementFromSelector(e){const t=X(e);return t?Q.findOne(t):null},getMultipleElementsFromSelector(e){const t=X(e);return t?Q.find(t):[]}},U=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;q.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),f(this))return;const s=Q.getElementFromSelector(this)||this.closest(`.${i}`);e.getOrCreateInstance(s)[t]()}))},Y=".bs.alert",K=`close${Y}`,G=`closed${Y}`;class J extends V{static get NAME(){return"alert"}close(){if(q.trigger(this._element,K).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),q.trigger(this._element,G),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=J.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}U(J,"close"),y(J);const Z='[data-bs-toggle="button"]';class ee extends V{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=ee.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}q.on(document,"click.bs.button.data-api",Z,(e=>{e.preventDefault();const t=e.target.closest(Z);ee.getOrCreateInstance(t).toggle()})),y(ee);const te=".bs.swipe",ne=`touchstart${te}`,ie=`touchmove${te}`,se=`touchend${te}`,re=`pointerdown${te}`,oe=`pointerup${te}`,ae={endCallback:null,leftCallback:null,rightCallback:null},le={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class ce extends z{constructor(e,t){super(),this._element=e,e&&ce.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return ae}static get DefaultType(){return le}static get NAME(){return"swipe"}dispose(){q.off(this._element,te)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),w(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&w(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?(q.on(this._element,re,(e=>this._start(e))),q.on(this._element,oe,(e=>this._end(e))),this._element.classList.add("pointer-event")):(q.on(this._element,ne,(e=>this._start(e))),q.on(this._element,ie,(e=>this._move(e))),q.on(this._element,se,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ue=".bs.carousel",he=".data-api",de="ArrowLeft",fe="ArrowRight",pe="next",ge="prev",me="left",_e="right",ve=`slide${ue}`,be=`slid${ue}`,ye=`keydown${ue}`,we=`mouseenter${ue}`,Ae=`mouseleave${ue}`,xe=`dragstart${ue}`,Te=`load${ue}${he}`,Ee=`click${ue}${he}`,Ce="carousel",ke="active",Se=".active",Oe=".carousel-item",De=Se+Oe,Le={[de]:_e,[fe]:me},Ne={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},je={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class $e extends V{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=Q.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Ce&&this.cycle()}static get Default(){return Ne}static get DefaultType(){return je}static get NAME(){return"carousel"}next(){this._slide(pe)}nextWhenVisible(){!document.hidden&&d(this._element)&&this.next()}prev(){this._slide(ge)}pause(){this._isSliding&&c(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?q.one(this._element,be,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void q.one(this._element,be,(()=>this.to(e)));const n=this._getItemIndex(this._getActive());if(n===e)return;const i=e>n?pe:ge;this._slide(i,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&q.on(this._element,ye,(e=>this._keydown(e))),"hover"===this._config.pause&&(q.on(this._element,we,(()=>this.pause())),q.on(this._element,Ae,(()=>this._maybeEnableCycle()))),this._config.touch&&ce.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of Q.find(".carousel-item img",this._element))q.on(e,xe,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(me)),rightCallback:()=>this._slide(this._directionToOrder(_e)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new ce(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Le[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=Q.findOne(Se,this._indicatorsElement);t.classList.remove(ke),t.removeAttribute("aria-current");const n=Q.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);n&&(n.classList.add(ke),n.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const n=this._getActive(),i=e===pe,s=t||x(this._getItems(),n,i,this._config.wrap);if(s===n)return;const r=this._getItemIndex(s),o=t=>q.trigger(this._element,t,{relatedTarget:s,direction:this._orderToDirection(e),from:this._getItemIndex(n),to:r});if(o(ve).defaultPrevented)return;if(!n||!s)return;const a=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(r),this._activeElement=s;const l=i?"carousel-item-start":"carousel-item-end",c=i?"carousel-item-next":"carousel-item-prev";s.classList.add(c),m(s),n.classList.add(l),s.classList.add(l);this._queueCallback((()=>{s.classList.remove(l,c),s.classList.add(ke),n.classList.remove(ke,c,l),this._isSliding=!1,o(be)}),n,this._isAnimated()),a&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return Q.findOne(De,this._element)}_getItems(){return Q.find(Oe,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return b()?e===me?ge:pe:e===me?pe:ge}_orderToDirection(e){return b()?e===ge?me:_e:e===ge?_e:me}static jQueryInterface(e){return this.each((function(){const t=$e.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}q.on(document,Ee,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=Q.getElementFromSelector(this);if(!t||!t.classList.contains(Ce))return;e.preventDefault();const n=$e.getOrCreateInstance(t),i=this.getAttribute("data-bs-slide-to");return i?(n.to(i),void n._maybeEnableCycle()):"next"===B.getDataAttribute(this,"slide")?(n.next(),void n._maybeEnableCycle()):(n.prev(),void n._maybeEnableCycle())})),q.on(window,Te,(()=>{const e=Q.find('[data-bs-ride="carousel"]');for(const t of e)$e.getOrCreateInstance(t)})),y($e);const Ie=".bs.collapse",Pe=`show${Ie}`,Me=`shown${Ie}`,He=`hide${Ie}`,qe=`hidden${Ie}`,Fe=`click${Ie}.data-api`,Re="show",We="collapse",Be="collapsing",ze=`:scope .${We} .${We}`,Ve='[data-bs-toggle="collapse"]',Xe={parent:null,toggle:!0},Qe={parent:"(null|element)",toggle:"boolean"};class Ue extends V{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const n=Q.find(Ve);for(const e of n){const t=Q.getSelectorFromElement(e),n=Q.find(t).filter((e=>e===this._element));null!==t&&n.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Xe}static get DefaultType(){return Qe}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Ue.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if(q.trigger(this._element,Pe).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(We),this._element.classList.add(Be),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const n=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Be),this._element.classList.add(We,Re),this._element.style[t]="",q.trigger(this._element,Me)}),this._element,!0),this._element.style[t]=`${this._element[n]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(q.trigger(this._element,He).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,m(this._element),this._element.classList.add(Be),this._element.classList.remove(We,Re);for(const e of this._triggerArray){const t=Q.getElementFromSelector(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Be),this._element.classList.add(We),q.trigger(this._element,qe)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Re)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=h(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(Ve);for(const t of e){const e=Q.getElementFromSelector(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=Q.find(ze,this._config.parent);return Q.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const n of e)n.classList.toggle("collapsed",!t),n.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const n=Ue.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}q.on(document,Fe,Ve,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();for(const e of Q.getMultipleElementsFromSelector(this))Ue.getOrCreateInstance(e,{toggle:!1}).toggle()})),y(Ue);const Ye="dropdown",Ke=".bs.dropdown",Ge=".data-api",Je="ArrowUp",Ze="ArrowDown",et=`hide${Ke}`,tt=`hidden${Ke}`,nt=`show${Ke}`,it=`shown${Ke}`,st=`click${Ke}${Ge}`,rt=`keydown${Ke}${Ge}`,ot=`keyup${Ke}${Ge}`,at="show",lt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',ct=`${lt}.${at}`,ut=".dropdown-menu",ht=b()?"top-end":"top-start",dt=b()?"top-start":"top-end",ft=b()?"bottom-end":"bottom-start",pt=b()?"bottom-start":"bottom-end",gt=b()?"left-start":"right-start",mt=b()?"right-start":"left-start",_t={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},vt={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class bt extends V{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=Q.next(this._element,ut)[0]||Q.prev(this._element,ut)[0]||Q.findOne(ut,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return _t}static get DefaultType(){return vt}static get NAME(){return Ye}toggle(){return this._isShown()?this.hide():this.show()}show(){if(f(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!q.trigger(this._element,nt,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))q.on(e,"mouseover",g);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(at),this._element.classList.add(at),q.trigger(this._element,it,e)}}hide(){if(f(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!q.trigger(this._element,et,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))q.off(e,"mouseover",g);this._popper&&this._popper.destroy(),this._menu.classList.remove(at),this._element.classList.remove(at),this._element.setAttribute("aria-expanded","false"),B.removeDataAttribute(this._menu,"popper"),q.trigger(this._element,tt,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!u(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Ye.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:u(this._config.reference)?e=h(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=s.n4(e,this._menu,t)}_isShown(){return this._menu.classList.contains(at)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return gt;if(e.classList.contains("dropstart"))return mt;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?dt:ht:t?pt:ft}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(B.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,...w(this._config.popperConfig,[e])}}_selectMenuItem({key:e,target:t}){const n=Q.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>d(e)));n.length&&x(n,t,e===Ze,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=bt.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=Q.find(ct);for(const n of t){const t=bt.getInstance(n);if(!t||!1===t._config.autoClose)continue;const i=e.composedPath(),s=i.includes(t._menu);if(i.includes(t._element)||"inside"===t._config.autoClose&&!s||"outside"===t._config.autoClose&&s)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const r={relatedTarget:t._element};"click"===e.type&&(r.clickEvent=e),t._completeHide(r)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),n="Escape"===e.key,i=[Je,Ze].includes(e.key);if(!i&&!n)return;if(t&&!n)return;e.preventDefault();const s=this.matches(lt)?this:Q.prev(this,lt)[0]||Q.next(this,lt)[0]||Q.findOne(lt,e.delegateTarget.parentNode),r=bt.getOrCreateInstance(s);if(i)return e.stopPropagation(),r.show(),void r._selectMenuItem(e);r._isShown()&&(e.stopPropagation(),r.hide(),s.focus())}}q.on(document,rt,lt,bt.dataApiKeydownHandler),q.on(document,rt,ut,bt.dataApiKeydownHandler),q.on(document,st,bt.clearMenus),q.on(document,ot,bt.clearMenus),q.on(document,st,lt,(function(e){e.preventDefault(),bt.getOrCreateInstance(this).toggle()})),y(bt);const yt="backdrop",wt="show",At=`mousedown.bs.${yt}`,xt={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Tt={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class Et extends z{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return xt}static get DefaultType(){return Tt}static get NAME(){return yt}show(e){if(!this._config.isVisible)return void w(e);this._append();const t=this._getElement();this._config.isAnimated&&m(t),t.classList.add(wt),this._emulateAnimation((()=>{w(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(wt),this._emulateAnimation((()=>{this.dispose(),w(e)}))):w(e)}dispose(){this._isAppended&&(q.off(this._element,At),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=h(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),q.on(e,At,(()=>{w(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){A(e,this._getElement(),this._config.isAnimated)}}const Ct=".bs.focustrap",kt=`focusin${Ct}`,St=`keydown.tab${Ct}`,Ot="backward",Dt={autofocus:!0,trapElement:null},Lt={autofocus:"boolean",trapElement:"element"};class Nt extends z{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return Dt}static get DefaultType(){return Lt}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),q.off(document,Ct),q.on(document,kt,(e=>this._handleFocusin(e))),q.on(document,St,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,q.off(document,Ct))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const n=Q.focusableChildren(t);0===n.length?t.focus():this._lastTabNavDirection===Ot?n[n.length-1].focus():n[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Ot:"forward")}}const jt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",$t=".sticky-top",It="padding-right",Pt="margin-right";class Mt{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,It,(t=>t+e)),this._setElementAttributes(jt,It,(t=>t+e)),this._setElementAttributes($t,Pt,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,It),this._resetElementAttributes(jt,It),this._resetElementAttributes($t,Pt)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const s=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${n(Number.parseFloat(s))}px`)}))}_saveInitialAttribute(e,t){const n=e.style.getPropertyValue(t);n&&B.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=B.getDataAttribute(e,t);null!==n?(B.removeDataAttribute(e,t),e.style.setProperty(t,n)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(u(e))t(e);else for(const n of Q.find(e,this._element))t(n)}}const Ht=".bs.modal",qt=`hide${Ht}`,Ft=`hidePrevented${Ht}`,Rt=`hidden${Ht}`,Wt=`show${Ht}`,Bt=`shown${Ht}`,zt=`resize${Ht}`,Vt=`click.dismiss${Ht}`,Xt=`mousedown.dismiss${Ht}`,Qt=`keydown.dismiss${Ht}`,Ut=`click${Ht}.data-api`,Yt="modal-open",Kt="show",Gt="modal-static",Jt={backdrop:!0,focus:!0,keyboard:!0},Zt={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class en extends V{constructor(e,t){super(e,t),this._dialog=Q.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Mt,this._addEventListeners()}static get Default(){return Jt}static get DefaultType(){return Zt}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown||this._isTransitioning)return;q.trigger(this._element,Wt,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Yt),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;q.trigger(this._element,qt).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Kt),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){q.off(window,Ht),q.off(this._dialog,Ht),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new Et({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Nt({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=Q.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),m(this._element),this._element.classList.add(Kt);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,q.trigger(this._element,Bt,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){q.on(this._element,Qt,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():this._triggerBackdropTransition())})),q.on(window,zt,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),q.on(this._element,Xt,(e=>{q.one(this._element,Vt,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Yt),this._resetAdjustments(),this._scrollBar.reset(),q.trigger(this._element,Rt)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(q.trigger(this._element,Ft).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Gt)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Gt),this._queueCallback((()=>{this._element.classList.remove(Gt),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;if(n&&!e){const e=b()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!n&&e){const e=b()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=en.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}q.on(document,Ut,'[data-bs-toggle="modal"]',(function(e){const t=Q.getElementFromSelector(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),q.one(t,Wt,(e=>{e.defaultPrevented||q.one(t,Rt,(()=>{d(this)&&this.focus()}))}));const n=Q.findOne(".modal.show");n&&en.getInstance(n).hide();en.getOrCreateInstance(t).toggle(this)})),U(en),y(en);const tn=".bs.offcanvas",nn=".data-api",sn=`load${tn}${nn}`,rn="show",on="showing",an="hiding",ln=".offcanvas.show",cn=`show${tn}`,un=`shown${tn}`,hn=`hide${tn}`,dn=`hidePrevented${tn}`,fn=`hidden${tn}`,pn=`resize${tn}`,gn=`click${tn}${nn}`,mn=`keydown.dismiss${tn}`,_n={backdrop:!0,keyboard:!0,scroll:!1},vn={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class bn extends V{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return _n}static get DefaultType(){return vn}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if(q.trigger(this._element,cn,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Mt).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(on);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(rn),this._element.classList.remove(on),q.trigger(this._element,un,{relatedTarget:e})}),this._element,!0)}hide(){if(!this._isShown)return;if(q.trigger(this._element,hn).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(an),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(rn,an),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Mt).reset(),q.trigger(this._element,fn)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new Et({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():q.trigger(this._element,dn)}:null})}_initializeFocusTrap(){return new Nt({trapElement:this._element})}_addEventListeners(){q.on(this._element,mn,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():q.trigger(this._element,dn))}))}static jQueryInterface(e){return this.each((function(){const t=bn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}q.on(document,gn,'[data-bs-toggle="offcanvas"]',(function(e){const t=Q.getElementFromSelector(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),f(this))return;q.one(t,fn,(()=>{d(this)&&this.focus()}));const n=Q.findOne(ln);n&&n!==t&&bn.getInstance(n).hide();bn.getOrCreateInstance(t).toggle(this)})),q.on(window,sn,(()=>{for(const e of Q.find(ln))bn.getOrCreateInstance(e).show()})),q.on(window,pn,(()=>{for(const e of Q.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&bn.getOrCreateInstance(e).hide()})),U(bn),y(bn);const yn={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],dd:[],div:[],dl:[],dt:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},wn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),An=/^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i,xn=(e,t)=>{const n=e.nodeName.toLowerCase();return t.includes(n)?!wn.has(n)||Boolean(An.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(n)))};const Tn={allowList:yn,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},En={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Cn={entry:"(string|element|function|null)",selector:"(string|element)"};class kn extends z{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Tn}static get DefaultType(){return En}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,n]of Object.entries(this._config.content))this._setContent(e,n,t);const t=e.children[0],n=this._resolvePossibleFunction(this._config.extraClass);return n&&t.classList.add(...n.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,n]of Object.entries(e))super._typeCheckConfig({selector:t,entry:n},Cn)}_setContent(e,t,n){const i=Q.findOne(n,e);i&&((t=this._resolvePossibleFunction(t))?u(t)?this._putElementInTemplate(h(t),i):this._config.html?i.innerHTML=this._maybeSanitize(t):i.textContent=t:i.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),s=[].concat(...i.body.querySelectorAll("*"));for(const e of s){const n=e.nodeName.toLowerCase();if(!Object.keys(t).includes(n)){e.remove();continue}const i=[].concat(...e.attributes),s=[].concat(t["*"]||[],t[n]||[]);for(const t of i)xn(t,s)||e.removeAttribute(t.nodeName)}return i.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return w(e,[this])}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const Sn=new Set(["sanitize","allowList","sanitizeFn"]),On="fade",Dn="show",Ln=".tooltip-inner",Nn=".modal",jn="hide.bs.modal",$n="hover",In="focus",Pn={AUTO:"auto",TOP:"top",RIGHT:b()?"left":"right",BOTTOM:"bottom",LEFT:b()?"right":"left"},Mn={allowList:yn,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,6],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Hn={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class qn extends V{constructor(e,t){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Mn}static get DefaultType(){return Hn}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),q.off(this._element.closest(Nn),jn,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=q.trigger(this._element,this.constructor.eventName("show")),t=(p(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const n=this._getTipElement();this._element.setAttribute("aria-describedby",n.getAttribute("id"));const{container:i}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(i.append(n),q.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(n),n.classList.add(Dn),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))q.on(e,"mouseover",g);this._queueCallback((()=>{q.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if(q.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(Dn),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))q.off(e,"mouseover",g);this._activeTrigger.click=!1,this._activeTrigger[In]=!1,this._activeTrigger[$n]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),q.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(On,Dn),t.classList.add(`bs-${this.constructor.NAME}-auto`);const n=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",n),this._isAnimated()&&t.classList.add(On),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new kn({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{[Ln]:this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(On)}_isShown(){return this.tip&&this.tip.classList.contains(Dn)}_createPopper(e){const t=w(this._config.placement,[this,e,this._element]),n=Pn[t.toUpperCase()];return s.n4(this._element,e,this._getPopperConfig(n))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return w(e,[this._element])}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,...w(this._config.popperConfig,[t])}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)q.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===$n?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),n=t===$n?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");q.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?In:$n]=!0,t._enter()})),q.on(this._element,n,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?In:$n]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},q.on(this._element.closest(Nn),jn,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=B.getDataAttributes(this._element);for(const e of Object.keys(t))Sn.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:h(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const[t,n]of Object.entries(this._config))this.constructor.Default[t]!==n&&(e[t]=n);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=qn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}y(qn);const Fn=".popover-header",Rn=".popover-body",Wn={...qn.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},Bn={...qn.DefaultType,content:"(null|string|element|function)"};class zn extends qn{static get Default(){return Wn}static get DefaultType(){return Bn}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{[Fn]:this._getTitle(),[Rn]:this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=zn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}y(zn);const Vn=".bs.scrollspy",Xn=`activate${Vn}`,Qn=`click${Vn}`,Un=`load${Vn}.data-api`,Yn="active",Kn="[href]",Gn=".nav-link",Jn=`${Gn}, .nav-item > ${Gn}, .list-group-item`,Zn={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},ei={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class ti extends V{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Zn}static get DefaultType(){return ei}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=h(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&(q.off(this._config.target,Qn),q.on(this._config.target,Qn,Kn,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const n=this._rootElement||window,i=t.offsetTop-this._element.offsetTop;if(n.scrollTo)return void n.scrollTo({top:i,behavior:"smooth"});n.scrollTop=i}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),n=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},i=(this._rootElement||document.documentElement).scrollTop,s=i>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=i;for(const r of e){if(!r.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(r));continue}const e=r.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(s&&e){if(n(r),!i)return}else s||e||n(r)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=Q.find(Kn,this._config.target);for(const t of e){if(!t.hash||f(t))continue;const e=Q.findOne(decodeURI(t.hash),this._element);d(e)&&(this._targetLinks.set(decodeURI(t.hash),t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(Yn),this._activateParents(e),q.trigger(this._element,Xn,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))Q.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Yn);else for(const t of Q.parents(e,".nav, .list-group"))for(const e of Q.prev(t,Jn))e.classList.add(Yn)}_clearActiveClass(e){e.classList.remove(Yn);const t=Q.find(`${Kn}.${Yn}`,e);for(const e of t)e.classList.remove(Yn)}static jQueryInterface(e){return this.each((function(){const t=ti.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}q.on(window,Un,(()=>{for(const e of Q.find('[data-bs-spy="scroll"]'))ti.getOrCreateInstance(e)})),y(ti);const ni=".bs.tab",ii=`hide${ni}`,si=`hidden${ni}`,ri=`show${ni}`,oi=`shown${ni}`,ai=`click${ni}`,li=`keydown${ni}`,ci=`load${ni}`,ui="ArrowLeft",hi="ArrowRight",di="ArrowUp",fi="ArrowDown",pi="Home",gi="End",mi="active",_i="fade",vi="show",bi=".dropdown-toggle",yi=`:not(${bi})`,wi='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',Ai=`${`.nav-link${yi}, .list-group-item${yi}, [role="tab"]${yi}`}, ${wi}`,xi=`.${mi}[data-bs-toggle="tab"], .${mi}[data-bs-toggle="pill"], .${mi}[data-bs-toggle="list"]`;class Ti extends V{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),q.on(this._element,li,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),n=t?q.trigger(t,ii,{relatedTarget:e}):null;q.trigger(e,ri,{relatedTarget:t}).defaultPrevented||n&&n.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(mi),this._activate(Q.getElementFromSelector(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),q.trigger(e,oi,{relatedTarget:t})):e.classList.add(vi)}),e,e.classList.contains(_i))}_deactivate(e,t){if(!e)return;e.classList.remove(mi),e.blur(),this._deactivate(Q.getElementFromSelector(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),q.trigger(e,si,{relatedTarget:t})):e.classList.remove(vi)}),e,e.classList.contains(_i))}_keydown(e){if(![ui,hi,di,fi,pi,gi].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=this._getChildren().filter((e=>!f(e)));let n;if([pi,gi].includes(e.key))n=t[e.key===pi?0:t.length-1];else{const i=[hi,fi].includes(e.key);n=x(t,e.target,i,!0)}n&&(n.focus({preventScroll:!0}),Ti.getOrCreateInstance(n).show())}_getChildren(){return Q.find(Ai,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),n=this._getOuterElement(e);e.setAttribute("aria-selected",t),n!==e&&this._setAttributeIfNotExists(n,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=Q.getElementFromSelector(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`${e.id}`))}_toggleDropDown(e,t){const n=this._getOuterElement(e);if(!n.classList.contains("dropdown"))return;const i=(e,i)=>{const s=Q.findOne(e,n);s&&s.classList.toggle(i,t)};i(bi,mi),i(".dropdown-menu",vi),n.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,n){e.hasAttribute(t)||e.setAttribute(t,n)}_elemIsActive(e){return e.classList.contains(mi)}_getInnerElement(e){return e.matches(Ai)?e:Q.findOne(Ai,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=Ti.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}q.on(document,ai,wi,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),f(this)||Ti.getOrCreateInstance(this).show()})),q.on(window,ci,(()=>{for(const e of Q.find(xi))Ti.getOrCreateInstance(e)})),y(Ti);const Ei=".bs.toast",Ci=`mouseover${Ei}`,ki=`mouseout${Ei}`,Si=`focusin${Ei}`,Oi=`focusout${Ei}`,Di=`hide${Ei}`,Li=`hidden${Ei}`,Ni=`show${Ei}`,ji=`shown${Ei}`,$i="hide",Ii="show",Pi="showing",Mi={animation:"boolean",autohide:"boolean",delay:"number"},Hi={animation:!0,autohide:!0,delay:5e3};class qi extends V{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return Hi}static get DefaultType(){return Mi}static get NAME(){return"toast"}show(){if(q.trigger(this._element,Ni).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove($i),m(this._element),this._element.classList.add(Ii,Pi),this._queueCallback((()=>{this._element.classList.remove(Pi),q.trigger(this._element,ji),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if(q.trigger(this._element,Di).defaultPrevented)return;this._element.classList.add(Pi),this._queueCallback((()=>{this._element.classList.add($i),this._element.classList.remove(Pi,Ii),q.trigger(this._element,Li)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(Ii),super.dispose()}isShown(){return this._element.classList.contains(Ii)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){q.on(this._element,Ci,(e=>this._onInteraction(e,!0))),q.on(this._element,ki,(e=>this._onInteraction(e,!1))),q.on(this._element,Si,(e=>this._onInteraction(e,!0))),q.on(this._element,Oi,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=qi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}U(qi),y(qi);n(754);const Fi=t()("form"),Ri=t()(".js--form__input"),Wi=t()(".js--todos-wrapper"),Bi=t()("#task_text");function zi(e,n=!1){let i=t()("<li></li>").addClass("todo-item");!function(e,n,i){const s=t()("<input>",{type:"checkbox",checked:i}),r=t()("<span>",{text:n,class:"todo-item__description"});i&&r.addClass("todo-item--checked");const o=t()("<button></button>").text("Видалити").addClass("btn btn-primary ms-2").attr("type","button").attr("id","deleteTask_button"),a=t()("<button></button>").text("Подивитися задачу").addClass("btn btn-primary").attr("type","button").attr("id","viewTask_button");e.append(s,r,a,o)}(i,e,n),Wi.append(i)}Fi.on("submit",(function(e){e.preventDefault();const t=Ri.val().trim();t&&(zi(t),Fi[0].reset())})),Wi.on("click",(function(e){const n=t()(e.target),i=n.closest(".todo-item"),s=i.find(".todo-item__description");if(n.is(":checkbox")){const e=n.prop("checked");s.toggleClass("todo-item--checked",e)}else if(n.is("#deleteTask_button"))i.remove();else if(n.is("#viewTask_button")){const e=s.text();s.hasClass("todo-item--checked")?Bi.text(`${e} зроблено. Вітаю!`):t()("#task_text").text(e),t()("#exampleModal").modal("show")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,